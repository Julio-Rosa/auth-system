{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { PasswordValidators } from 'src/app/utils/password-validators';\nlet RegisterComponent = class RegisterComponent {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n    this.passtype = \"Show\";\n    this.passConfirmtype = \"Show\";\n    this.submitted = false;\n    this.isWorking = false;\n    this.userExists = false;\n    this.genericError = false;\n    this.success = false;\n    this.signupForm = new FormGroup({\n      firstName: new FormControl(null, Validators.compose([Validators.required, Validators.minLength(3)])),\n      lastName: new FormControl(null, Validators.compose([Validators.required, Validators.minLength(3)])),\n      username: new FormControl(null, Validators.compose([Validators.required, Validators.minLength(3)])),\n      password: new FormControl(null, Validators.compose([Validators.required, Validators.minLength(8), PasswordValidators.patternValidator(new RegExp('(?=.*[0-9])'), {\n        requiresDigit: true\n      }), PasswordValidators.patternValidator(new RegExp(\"(?=.*[A-Z])\"), {\n        requiresUppercase: true\n      }), PasswordValidators.patternValidator(new RegExp(\"(?=.*[a-z])\"), {\n        requiresLowercase: true\n      }), PasswordValidators.patternValidator(new RegExp(\"(?=.*[$@^!%*?&])\"), {\n        requiresSpecialChars: true\n      })])),\n      confirmPassword: new FormControl(null, [Validators.required, Validators.minLength(8)])\n    }, {\n      validators: PasswordValidators.MatchValidator\n    });\n  }\n  get f() {\n    return this.signupForm.controls;\n  }\n  get requiredValid() {\n    return !this.signupForm.controls[\"password\"].hasError(\"required\");\n  }\n  get minLengthValid() {\n    return !this.signupForm.controls[\"password\"].hasError(\"minlength\");\n  }\n  get requiresDigitValid() {\n    return !this.signupForm.controls[\"password\"].hasError(\"requiresDigit\");\n  }\n  get requiresUppercaseValid() {\n    return !this.signupForm.controls[\"password\"].hasError(\"requiresUppercase\");\n  }\n  get requiresLowercaseValid() {\n    return !this.signupForm.controls[\"password\"].hasError(\"requiresLowercase\");\n  }\n  get requiresSpecialCharsValid() {\n    return !this.signupForm.controls[\"password\"].hasError(\"requiresSpecialChars\");\n  }\n  get passwordValid() {\n    return this.signupForm.controls[\"password\"].errors === null;\n  }\n  showPassword() {\n    this.inputTypePass = !this.inputTypePass;\n    if (this.inputTypePass) {\n      this.passtype = \"Hide\";\n    } else {\n      this.passtype = \"Show\";\n    }\n  }\n  showConfirmPassword() {\n    this.inputTypeConfirmPass = !this.inputTypeConfirmPass;\n    if (this.inputTypeConfirmPass) {\n      this.passConfirmtype = \"Hide\";\n    } else {\n      this.passConfirmtype = \"Show\";\n    }\n  }\n  onSubmit() {\n    this.submitted = true;\n    if (this.signupForm.invalid) {\n      return;\n    }\n    this.user = {\n      firstName: this.signupForm.get('firstName').value,\n      lastName: this.signupForm.get('lastName').value,\n      username: this.signupForm.get('username').value,\n      password: this.signupForm.get('password').value\n    };\n    this.authService.register(this.user).subscribe(res => {\n      this.success = true;\n    }, err => {\n      if (err.error.message === \"Username already exists\") {\n        this.userExists = true;\n      } else {\n        this.genericError = true;\n      }\n    }, () => {\n      setTimeout(() => {\n        this.success = false;\n        this.router.navigate(['user/me']);\n      }, 3000);\n    });\n  }\n};\n__decorate([Input()], RegisterComponent.prototype, \"passtype\", void 0);\n__decorate([Input()], RegisterComponent.prototype, \"passConfirmtype\", void 0);\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"mappings":"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","names":["Component","Input","FormGroup","FormControl","Validators","PasswordValidators","RegisterComponent","constructor","authService","router","firstName","compose","required","minLength","lastName","username","password","patternValidator","RegExp","requiresDigit","requiresUppercase","requiresLowercase","requiresSpecialChars","confirmPassword","validators","MatchValidator","f","signupForm","controls","requiredValid","hasError","minLengthValid","requiresDigitValid","requiresUppercaseValid","requiresLowercaseValid","requiresSpecialCharsValid","passwordValid","errors","showPassword","inputTypePass","passtype","showConfirmPassword","inputTypeConfirmPass","passConfirmtype","onSubmit","submitted","invalid","user","get","value","register","subscribe","res","success","err","error","message","userExists","genericError","setTimeout","navigate","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/sam/Desktop/auth-front-end/src/app/components/register/register.component.ts"],"sourcesContent":["import { Component, Input } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { RegisterModel } from 'src/app/model/register.model';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { PasswordValidators } from 'src/app/utils/password-validators';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\n  @Input() passtype = \"Show\";\n  @Input() passConfirmtype = \"Show\";\n  submitted = false;\n  isWorking = false;\n  userExists = false;\n  genericError = false;\n  success = false;\n  inputTypePass: boolean;\n  inputTypeConfirmPass: boolean;\n\n  user: RegisterModel\n\n  constructor(private authService: AuthService, private router: Router) { }\n\n\n  signupForm = new FormGroup({\n    firstName: new FormControl(\n      null,\n      Validators.compose([\n        Validators.required,\n        Validators.minLength(3)\n      ])\n    ),\n    lastName: new FormControl(\n      null,\n      Validators.compose([\n        Validators.required,\n        Validators.minLength(3)\n      ])\n    ),\n    username: new FormControl(\n      null,\n      Validators.compose([\n        Validators.required,\n        Validators.minLength(3)\n      ])\n    ),\n    password: new FormControl(\n      null,\n      Validators.compose([\n        Validators.required,\n        Validators.minLength(8),\n        PasswordValidators.patternValidator(new RegExp('(?=.*[0-9])'), {\n          requiresDigit: true\n        }),\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[A-Z])\"), {\n          requiresUppercase: true\n        }),\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[a-z])\"), {\n          requiresLowercase: true\n        }),\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[$@^!%*?&])\"), {\n          requiresSpecialChars: true\n        })\n      ])\n    ),\n    confirmPassword: new FormControl(\n      null,\n      [\n        Validators.required,\n        Validators.minLength(8)\n\n      ])\n  },\n    {\n      validators: PasswordValidators.MatchValidator\n    }\n\n  );\n\n  get f() {\n    return this.signupForm.controls;\n  }\n  get requiredValid() {\n    return !this.signupForm.controls[\"password\"].hasError(\"required\");\n  }\n  get minLengthValid() {\n    return !this.signupForm.controls[\"password\"].hasError(\"minlength\");\n  }\n  get requiresDigitValid() {\n    return !this.signupForm.controls[\"password\"].hasError(\"requiresDigit\");\n  }\n  get requiresUppercaseValid() {\n    return !this.signupForm.controls[\"password\"].hasError(\"requiresUppercase\");\n  }\n  get requiresLowercaseValid() {\n    return !this.signupForm.controls[\"password\"].hasError(\"requiresLowercase\");\n  }\n  get requiresSpecialCharsValid() {\n    return !this.signupForm.controls[\"password\"].hasError(\"requiresSpecialChars\");\n  }\n  get passwordValid() {\n    return this.signupForm.controls[\"password\"].errors === null;\n  }\n\n  showPassword(){\n    this.inputTypePass = !this.inputTypePass\n    if(this.inputTypePass){\n        this.passtype = \"Hide\"\n    }else{\n      this.passtype = \"Show\"\n    }\n  }\n  showConfirmPassword(){\n    this.inputTypeConfirmPass = !this.inputTypeConfirmPass\n    if(this.inputTypeConfirmPass){\n        this.passConfirmtype = \"Hide\"\n    }else{\n      this.passConfirmtype = \"Show\"\n    }\n  }\n  onSubmit() {\n    this.submitted = true;\n\n    if (this.signupForm.invalid) {\n      return;\n    }\n\n    this.user = {\n      firstName: this.signupForm.get('firstName').value,\n      lastName: this.signupForm.get('lastName').value,\n      username: this.signupForm.get('username').value,\n      password: this.signupForm.get('password').value\n    }\n\n    this.authService.register(this.user)\n      .subscribe((res) => {\n        this.success = true;\n      }, (err) => {\n\n        if (err.error.message === \"Username already exists\") {\n          this.userExists = true;\n        } else {\n          this.genericError = true;\n\n        }\n\n      }, () => {\n        setTimeout(() => {\n          this.success = false;\n          this.router.navigate(['user/me']);\n        },3000);\n      })\n\n\n\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}