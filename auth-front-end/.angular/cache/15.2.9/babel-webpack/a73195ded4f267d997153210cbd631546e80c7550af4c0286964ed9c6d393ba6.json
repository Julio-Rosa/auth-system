{"ast":null,"code":"export class PasswordValidators {\n  constructor() {}\n  static patternValidator(regex, error) {\n    return control => {\n      if (!control.value) {\n        // if control is empty return no error.\n        return null;\n      }\n      // test the value of the control against the regexp supplied.\n      const valid = regex.test(control.value);\n      // if true, return no error (no error), else return error passed in the second parameter.\n      return valid ? null : error;\n    };\n  }\n  static MatchValidator(control) {\n    const password = control.get(\"password\").value; // get password from our password form control\n    const confirmPassword = control.get(\"confirmPassword\").value; // get password from our confirmPassword form control\n    // if the confirmPassword value is null or empty, don't return an error.\n    if (!confirmPassword?.length) {\n      return null;\n    }\n    // if the confirmPassword length is < 8, set the minLength error.\n    if (confirmPassword.length < 8) {\n      control.get('confirmPassword').setErrors({\n        minLength: true\n      });\n    } else {\n      // compare the passwords and see if they match.\n      if (password !== confirmPassword) {\n        control.get(\"confirmPassword\").setErrors({\n          mismatch: true\n        });\n      } else {\n        // if passwords match, don't return an error.\n        return null;\n      }\n    }\n  }\n}","map":{"version":3,"mappings":"AAEA,OAAM,MAAOA,kBAAkB;EAC3BC,eAAgB;EAEhB,OAAOC,gBAAgB,CAACC,KAAa,EAAEC,KAAuB;IAC1D,OAAQC,OAAwB,IAA6B;MAC3D,IAAI,CAACA,OAAO,CAACC,KAAK,EAAE;QAClB;QACA,OAAO,IAAI;;MAGb;MACA,MAAMC,KAAK,GAAGJ,KAAK,CAACK,IAAI,CAACH,OAAO,CAACC,KAAK,CAAC;MAEvC;MACA,OAAOC,KAAK,GAAG,IAAI,GAAGH,KAAK;IAC7B,CAAC;EACH;EAEA,OAAOK,cAAc,CAACJ,OAAwB;IAC5C,MAAMK,QAAQ,GAAWL,OAAO,CAACM,GAAG,CAAC,UAAU,CAAE,CAACL,KAAK,CAAC,CAAC;IACzD,MAAMM,eAAe,GAAWP,OAAO,CAACM,GAAG,CAAC,iBAAiB,CAAE,CAACL,KAAK,CAAC,CAAC;IAEvE;IACA,IAAI,CAACM,eAAe,EAAEC,MAAM,EAAE;MAC5B,OAAO,IAAI;;IAGb;IACA,IAAID,eAAe,CAACC,MAAM,GAAG,CAAC,EAAE;MAC9BR,OAAO,CAACM,GAAG,CAAC,iBAAiB,CAAC,CAACG,SAAS,CAAC;QAAEC,SAAS,EAAE;MAAI,CAAE,CAAC;KAC9D,MAAM;MACL;MACA,IAAIL,QAAQ,KAAKE,eAAe,EAAE;QAChCP,OAAO,CAACM,GAAG,CAAC,iBAAiB,CAAC,CAACG,SAAS,CAAC;UAAEE,QAAQ,EAAE;QAAI,CAAE,CAAC;OAC7D,MAAM;QACL;QACA,OAAO,IAAI;;;EAGjB","names":["PasswordValidators","constructor","patternValidator","regex","error","control","value","valid","test","MatchValidator","password","get","confirmPassword","length","setErrors","minLength","mismatch"],"sourceRoot":"","sources":["/home/sam/Desktop/auth-front-end/src/app/utils/password-validators.ts"],"sourcesContent":["import { ValidationErrors, ValidatorFn, AbstractControl } from \"@angular/forms\";\n\nexport class PasswordValidators {\n    constructor() { }\n\n    static patternValidator(regex: RegExp, error: ValidationErrors): ValidatorFn {\n        return (control: AbstractControl): { [key: string]: any  } => {\n          if (!control.value) {\n            // if control is empty return no error.\n            return null;\n          }\n    \n          // test the value of the control against the regexp supplied.\n          const valid = regex.test(control.value);\n    \n          // if true, return no error (no error), else return error passed in the second parameter.\n          return valid ? null : error;\n        };\n      }\n    \n      static MatchValidator(control: AbstractControl) {\n        const password: string = control.get(\"password\")!.value; // get password from our password form control\n        const confirmPassword: string = control.get(\"confirmPassword\")!.value; // get password from our confirmPassword form control\n        \n        // if the confirmPassword value is null or empty, don't return an error.\n        if (!confirmPassword?.length) {\n          return null;\n        }\n    \n        // if the confirmPassword length is < 8, set the minLength error.\n        if (confirmPassword.length < 8) {\n          control.get('confirmPassword').setErrors({ minLength: true });\n        } else {\n          // compare the passwords and see if they match.\n          if (password !== confirmPassword) {\n            control.get(\"confirmPassword\").setErrors({ mismatch: true });\n          } else {\n            // if passwords match, don't return an error.\n            return null;\n          }\n        }\n      }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}