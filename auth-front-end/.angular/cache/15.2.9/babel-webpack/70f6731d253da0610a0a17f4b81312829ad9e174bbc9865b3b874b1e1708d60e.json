{"ast":null,"code":"import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ngx-cookie-service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nfunction LoginComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtext(1, \"An error occurred, please try again.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtext(1, \"Incorrect username or password.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16)(1, \"p\", 17);\n    i0.ɵɵtext(2, \"Username is required!\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction LoginComponent_div_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16)(1, \"p\", 17);\n    i0.ɵɵtext(2, \"Password is required!\");\n    i0.ɵɵelementEnd()();\n  }\n}\nexport class LoginComponent {\n  constructor(authService, router, cookieService) {\n    this.authService = authService;\n    this.router = router;\n    this.cookieService = cookieService;\n    this.btnText = \"Login\";\n    this.badCredential = false;\n    this.genericError = false;\n    this.inputType = false;\n    this.type = \"Show\";\n  }\n  ngOnInit() {\n    this.loginForm = new FormGroup({\n      username: new FormControl('', [Validators.required]),\n      password: new FormControl('', [Validators.required])\n    });\n  }\n  showPassword() {\n    this.inputType = !this.inputType;\n    if (this.inputType) {\n      this.type = \"Hide\";\n    } else {\n      this.type = \"Show\";\n    }\n  }\n  get username() {\n    return this.loginForm.get('username');\n  }\n  get password() {\n    return this.loginForm.get('password');\n  }\n  submit() {\n    if (this.loginForm.invalid) {\n      return;\n    }\n    this.authService.login(this.loginForm.get('username')?.value, this.loginForm.get('password')?.value).subscribe(res => {\n      this.token = res;\n      this.cookieService.deleteAll();\n      this.cookieService.delete();\n      this.cookieService.set('token', `Bearer ${this.token.token}`);\n    }, err => {\n      this.loginForm.reset();\n      if (err.error.status === 500) {\n        this.badCredential = true;\n        setTimeout(() => {\n          this.badCredential = false;\n        }, 4000);\n      } else {\n        this.genericError = true;\n        setTimeout(() => {\n          this.genericError = false;\n        }, 4000);\n      }\n    }, () => {\n      this.router.navigate(['user/me']);\n    });\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.CookieService));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  inputs: {\n    btnText: \"btnText\",\n    type: \"type\"\n  },\n  decls: 23,\n  vars: 7,\n  consts: [[1, \"login-container\"], [1, \"form-bg\", \"form-div\"], [\"class\", \"error-popup\", 4, \"ngIf\"], [1, \"sign\"], [3, \"formGroup\", \"ngSubmit\"], [\"formDir\", \"ngForm\"], [1, \"form-container\"], [\"for\", \"username\", 1, \"label\"], [1, \"input-div\"], [\"type\", \"text\", \"formControlName\", \"username\", \"required\", \"\", 1, \"field-input\"], [\"class\", \"error\", 4, \"ngIf\"], [\"for\", \"password\", 1, \"label\"], [\"formControlName\", \"password\", \"required\", \"\", 1, \"field-input\", 3, \"type\"], [1, \"show\", 3, \"click\"], [\"type\", \"submit\", \"value\", \"Continue\", 1, \"submit-btn\"], [1, \"error-popup\"], [1, \"error\"], [1, \"danger\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n      i0.ɵɵtemplate(2, LoginComponent_div_2_Template, 2, 0, \"div\", 2);\n      i0.ɵɵtemplate(3, LoginComponent_div_3_Template, 2, 0, \"div\", 2);\n      i0.ɵɵelementStart(4, \"span\", 3);\n      i0.ɵɵtext(5, \"Sign in to your account\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"form\", 4, 5);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_6_listener() {\n        return ctx.submit();\n      });\n      i0.ɵɵelementStart(8, \"div\", 6)(9, \"label\", 7);\n      i0.ɵɵtext(10, \"Username\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"div\", 8);\n      i0.ɵɵelement(12, \"input\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(13, LoginComponent_div_13_Template, 3, 0, \"div\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"div\", 6)(15, \"label\", 11);\n      i0.ɵɵtext(16, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"div\", 8);\n      i0.ɵɵelement(18, \"input\", 12);\n      i0.ɵɵelementStart(19, \"span\", 13);\n      i0.ɵɵlistener(\"click\", function LoginComponent_Template_span_click_19_listener() {\n        return ctx.showPassword();\n      });\n      i0.ɵɵtext(20);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(21, LoginComponent_div_21_Template, 3, 0, \"div\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(22, \"input\", 14);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      const _r2 = i0.ɵɵreference(7);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.genericError);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.badCredential);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.username.invalid && _r2.submitted);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"type\", ctx.inputType ? \"text\" : \"password\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.type);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.password.invalid && _r2.submitted);\n    }\n  },\n  dependencies: [i4.NgIf, i5.ɵNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.RequiredValidator, i5.FormGroupDirective, i5.FormControlName],\n  styles: [\".login-container[_ngcontent-%COMP%]{\\n    display: flex;\\n    justify-content: center;\\n    padding-top: 10%;\\n    \\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9sb2dpbi9sb2dpbi5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksYUFBYTtJQUNiLHVCQUF1QjtJQUN2QixnQkFBZ0I7O0FBRXBCIiwic291cmNlc0NvbnRlbnQiOlsiLmxvZ2luLWNvbnRhaW5lcntcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIHBhZGRpbmctdG9wOiAxMCU7XG4gICAgXG59XG5cbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["FormGroup","FormControl","Validators","i0","LoginComponent","constructor","authService","router","cookieService","ngOnInit","loginForm","username","required","password","showPassword","inputType","type","get","submit","invalid","login","value","subscribe","res","token","deleteAll","delete","set","err","reset","error","status","badCredential","setTimeout","genericError","navigate","selectors","inputs","btnText","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/home/sam/Desktop/auth-front-end/src/app/components/login/login.component.ts","/home/sam/Desktop/auth-front-end/src/app/components/login/login.component.html"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport {CookieService} from 'ngx-cookie-service';\nimport { TokenModel } from 'src/app/model/token.model';\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  @Input() btnText = \"Login\";\n  loginForm!: FormGroup;\n  badCredential = false;\n  genericError = false;\n  token!: TokenModel;\n  inputType = false;\n  @Input() type = \"Show\";\n\n  constructor(private authService: AuthService, private router: Router, private cookieService: CookieService) { }\n\n  ngOnInit(): void {\n    this.loginForm = new FormGroup({\n      username: new FormControl('', [Validators.required]),\n      password: new FormControl('', [Validators.required])\n    });\n\n\n   \n   \n  }\n \n  showPassword(){\n    this.inputType = !this.inputType\n    if(this.inputType){\n        this.type = \"Hide\"\n    }else{\n      this.type = \"Show\"\n    }\n  }\n\n  get username() {\n    return this.loginForm.get('username')!;\n  }\n  get password() {\n    return this.loginForm.get('password')!;\n  }\n  submit() {\n    if (this.loginForm.invalid) {\n      return;\n    }\n    this.authService.login(this.loginForm.get('username')?.value, this.loginForm.get('password')?.value)\n      .subscribe((res) => {\n        this.token = res;\n        this.cookieService.deleteAll();\n        this.cookieService.delete()\n        this.cookieService.set('token',`Bearer ${this.token.token}`);\n      }, (err) => {\n        this.loginForm.reset()\n        if (err.error.status === 500) {\n         \n          this.badCredential = true;\n          \n          setTimeout(() => {\n            this.badCredential = false;\n            \n          },4000);\n        }else{\n          this.genericError = true;\n          setTimeout(() => {\n            this.genericError = false;\n            \n          },4000);\n          \n        }\n\n      }, () => {\n        this.router.navigate(['user/me']);\n      })\n\n\n  }\n\n}\n","<div class=\"login-container\">\n    <div class=\"form-bg form-div\">\n        <div class=\"error-popup\" *ngIf=\"genericError\">An error occurred, please try again.</div>\n        <div class=\"error-popup\" *ngIf=\"badCredential\">Incorrect username or password.</div>\n        \n        <span class=\"sign\">Sign in to your account</span>\n        <form (ngSubmit)=\"submit()\" [formGroup]=\"loginForm\" #formDir=\"ngForm\">\n            <div class=\"form-container\">\n                <label class=\"label\"for=\"username\">Username</label>\n                <div class=\"input-div\">\n                    <input  class=\"field-input\" class=\"field-input\" type=\"text\"  formControlName=\"username\" required>\n                </div>\n                <div class=\"error\" *ngIf=\"username.invalid && formDir.submitted\">\n                    <p class=\"danger\">Username is required!</p>\n                  \n                </div>\n            </div>\n            <div class=\"form-container\" >\n                <label class=\"label\"for=\"password\">Password</label>\n                <div class=\"input-div\">\n                    <input  class=\"field-input\" [type]=\"inputType ? 'text': 'password'\"formControlName=\"password\" required>\n                    <span class=\"show\" (click)=\"showPassword()\">{{type}}</span>\n                </div>\n                <div class=\"error\" *ngIf=\"password.invalid && formDir.submitted\"> \n                    <p class=\"danger\">Password is required!</p> \n                </div>\n            </div>\n            \n           \n            <input class=\"submit-btn\" type=\"submit\" value=\"Continue\">\n            \n        \n        </form>\n    </div>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}