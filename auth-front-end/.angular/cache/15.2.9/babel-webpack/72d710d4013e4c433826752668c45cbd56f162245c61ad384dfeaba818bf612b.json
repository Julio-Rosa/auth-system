{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet RegisterComponent = class RegisterComponent {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n    this.submitted = false;\n    this.isWorking = false;\n    this.userExists = false;\n    this.genericError = false;\n    this.success = false;\n    this.signupForm = new FormGroup({\n      firstName: new FormControl(null, Validators.compose([Validators.required, Validators.minLength(3)])),\n      lastName: new FormControl(null, Validators.compose([Validators.required, Validators.minLength(3)])),\n      username: new FormControl(null, Validators.compose([Validators.required, Validators.minLength(3)])),\n      password: new FormControl(null, Validators.compose([Validators.required, Validators.minLength(8), PasswordValidators.patternValidator(new RegExp('(?=.*[0-9])'), {\n        requiresDigit: true\n      }), PasswordValidators.patternValidator(new RegExp(\"(?=.*[A-Z])\"), {\n        requiresUppercase: true\n      }), PasswordValidators.patternValidator(new RegExp(\"(?=.*[a-z])\"), {\n        requiresLowercase: true\n      }), PasswordValidators.patternValidator(new RegExp(\"(?=.*[$@^!%*?&])\"), {\n        requiresSpecialChars: true\n      })])),\n      confirmPassword: new FormControl(null, [Validators.required, Validators.minLength(8)])\n    }, {\n      validators: PasswordValidators.MatchValidator\n    });\n  }\n  get f() {\n    return this.signupForm.controls;\n  }\n  get requiredValid() {\n    return !this.signupForm.controls[\"password\"].hasError(\"required\");\n  }\n  get minLengthValid() {\n    return !this.signupForm.controls[\"password\"].hasError(\"minlength\");\n  }\n  get requiresDigitValid() {\n    return !this.signupForm.controls[\"password\"].hasError(\"requiresDigit\");\n  }\n  get requiresUppercaseValid() {\n    return !this.signupForm.controls[\"password\"].hasError(\"requiresUppercase\");\n  }\n  get requiresLowercaseValid() {\n    return !this.signupForm.controls[\"password\"].hasError(\"requiresLowercase\");\n  }\n  get requiresSpecialCharsValid() {\n    return !this.signupForm.controls[\"password\"].hasError(\"requiresSpecialChars\");\n  }\n  get passwordValid() {\n    return this.signupForm.controls[\"password\"].errors === null;\n  }\n  showPassword() {\n    this.inputType = !this.inputType;\n  }\n  onSubmit() {\n    this.submitted = true;\n    if (this.signupForm.invalid) {\n      return;\n    }\n    this.user = {\n      firstName: this.signupForm.get('firstName').value,\n      lastName: this.signupForm.get('lastName').value,\n      username: this.signupForm.get('username').value,\n      password: this.signupForm.get('password').value\n    };\n    this.registerService.register(this.user).subscribe(res => {\n      this.success = true;\n    }, err => {\n      if (err.error.message === \"Username already exists\") {\n        this.userExists = true;\n      } else {\n        this.genericError = true;\n      }\n    }, () => {\n      setTimeout(() => {\n        this.success = false;\n        this.router.navigate(['login']);\n      }, 2000);\n    });\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"mappings":"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","names":["Component","RegisterComponent","constructor","authService","router","FormGroup","firstName","FormControl","Validators","compose","required","minLength","lastName","username","password","PasswordValidators","patternValidator","RegExp","requiresDigit","requiresUppercase","requiresLowercase","requiresSpecialChars","confirmPassword","validators","MatchValidator","f","signupForm","controls","requiredValid","hasError","minLengthValid","requiresDigitValid","requiresUppercaseValid","requiresLowercaseValid","requiresSpecialCharsValid","passwordValid","errors","showPassword","inputType","onSubmit","submitted","invalid","user","get","value","registerService","register","subscribe","res","success","err","error","message","userExists","genericError","setTimeout","navigate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/sam/Desktop/auth-front-end/src/app/components/register/register.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\n  submitted = false;\n  isWorking = false;\n  userExists = false;\n  genericError = false;\n  success = false;\n  inputType: boolean\n\n  user: RegisterRequest\n\n  constructor(private authService: AuthService, private router: Router) { }\n\n\n  signupForm = new FormGroup({\n    firstName: new FormControl(\n      null,\n      Validators.compose([\n        Validators.required,\n        Validators.minLength(3)\n      ])\n    ),\n    lastName: new FormControl(\n      null,\n      Validators.compose([\n        Validators.required,\n        Validators.minLength(3)\n      ])\n    ),\n    username: new FormControl(\n      null,\n      Validators.compose([\n        Validators.required,\n        Validators.minLength(3)\n      ])\n    ),\n    password: new FormControl(\n      null,\n      Validators.compose([\n        Validators.required,\n        Validators.minLength(8),\n        PasswordValidators.patternValidator(new RegExp('(?=.*[0-9])'), {\n          requiresDigit: true\n        }),\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[A-Z])\"), {\n          requiresUppercase: true\n        }),\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[a-z])\"), {\n          requiresLowercase: true\n        }),\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[$@^!%*?&])\"), {\n          requiresSpecialChars: true\n        })\n      ])\n    ),\n    confirmPassword: new FormControl(\n      null,\n      [\n        Validators.required,\n        Validators.minLength(8)\n\n      ])\n  },\n    {\n      validators: PasswordValidators.MatchValidator\n    }\n\n  );\n\n  get f() {\n    return this.signupForm.controls;\n  }\n  get requiredValid() {\n    return !this.signupForm.controls[\"password\"].hasError(\"required\");\n  }\n  get minLengthValid() {\n    return !this.signupForm.controls[\"password\"].hasError(\"minlength\");\n  }\n  get requiresDigitValid() {\n    return !this.signupForm.controls[\"password\"].hasError(\"requiresDigit\");\n  }\n  get requiresUppercaseValid() {\n    return !this.signupForm.controls[\"password\"].hasError(\"requiresUppercase\");\n  }\n  get requiresLowercaseValid() {\n    return !this.signupForm.controls[\"password\"].hasError(\"requiresLowercase\");\n  }\n  get requiresSpecialCharsValid() {\n    return !this.signupForm.controls[\"password\"].hasError(\"requiresSpecialChars\");\n  }\n  get passwordValid() {\n    return this.signupForm.controls[\"password\"].errors === null;\n  }\n\n  showPassword(){\n    this.inputType = !this.inputType;\n  }\n\n  onSubmit() {\n    this.submitted = true;\n\n    if (this.signupForm.invalid) {\n      return;\n    }\n\n    this.user = {\n      firstName: this.signupForm.get('firstName').value,\n      lastName: this.signupForm.get('lastName').value,\n      username: this.signupForm.get('username').value,\n      password: this.signupForm.get('password').value\n    }\n\n    this.registerService.register(this.user)\n      .subscribe((res) => {\n        this.success = true;\n      }, (err) => {\n\n        if (err.error.message === \"Username already exists\") {\n          this.userExists = true;\n        } else {\n          this.genericError = true;\n\n        }\n\n      }, () => {\n        setTimeout(() => {\n          this.success = false;\n          this.router.navigate(['login']);\n        },2000);\n      })\n\n\n\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}