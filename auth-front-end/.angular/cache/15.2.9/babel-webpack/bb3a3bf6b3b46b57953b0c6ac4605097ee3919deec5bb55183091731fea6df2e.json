{"ast":null,"code":"import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { PasswordValidators } from 'src/app/utils/password-validators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction RegisterComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵtext(1, \"Successfully registered user\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_10_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 23);\n    i0.ɵɵtext(1, \"First name is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_10_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 23);\n    i0.ɵɵtext(1, \"Must be at least 3 characters long\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 22);\n    i0.ɵɵtemplate(1, RegisterComponent_div_10_span_1_Template, 2, 0, \"span\", 14);\n    i0.ɵɵtemplate(2, RegisterComponent_div_10_span_2_Template, 2, 0, \"span\", 14);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.f.firstName.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.f.firstName.errors[\"minlength\"]);\n  }\n}\nfunction RegisterComponent_div_16_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 23);\n    i0.ɵɵtext(1, \"Last name is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_16_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 23);\n    i0.ɵɵtext(1, \"Must be at least 3 characters long\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 22);\n    i0.ɵɵtemplate(1, RegisterComponent_div_16_span_1_Template, 2, 0, \"span\", 14);\n    i0.ɵɵtemplate(2, RegisterComponent_div_16_span_2_Template, 2, 0, \"span\", 14);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.f.lastName.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.f.lastName.errors[\"minlength\"]);\n  }\n}\nfunction RegisterComponent_div_22_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 23);\n    i0.ɵɵtext(1, \"Username is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_22_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 23);\n    i0.ɵɵtext(1, \"Must be at least 3 characters long\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 22);\n    i0.ɵɵtemplate(1, RegisterComponent_div_22_span_1_Template, 2, 0, \"span\", 14);\n    i0.ɵɵtemplate(2, RegisterComponent_div_22_span_2_Template, 2, 0, \"span\", 14);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.f.username.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.f.username.errors[\"minlength\"]);\n  }\n}\nfunction RegisterComponent_span_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 23);\n    i0.ɵɵtext(1, \"Username already exists\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_span_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 23);\n    i0.ɵɵtext(1, \"An error occurred, please try again.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_span_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 23);\n    i0.ɵɵtext(1, \"Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_33_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 23);\n    i0.ɵɵtext(1, \" Must be at least 8 characters long\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_33_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 23);\n    i0.ɵɵtext(1, \"Must contain at least 1 digit\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_33_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 23);\n    i0.ɵɵtext(1, \"Must contain at least 1 uppercase character\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_33_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 23);\n    i0.ɵɵtext(1, \"Must contain at least 1 lowercase character\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_33_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 23);\n    i0.ɵɵtext(1, \" Must contain at least 1 special character\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 22);\n    i0.ɵɵtemplate(1, RegisterComponent_div_33_span_1_Template, 2, 0, \"span\", 14);\n    i0.ɵɵtemplate(2, RegisterComponent_div_33_span_2_Template, 2, 0, \"span\", 14);\n    i0.ɵɵtemplate(3, RegisterComponent_div_33_span_3_Template, 2, 0, \"span\", 14);\n    i0.ɵɵtemplate(4, RegisterComponent_div_33_span_4_Template, 2, 0, \"span\", 14);\n    i0.ɵɵtemplate(5, RegisterComponent_div_33_span_5_Template, 2, 0, \"span\", 14);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r7.minLengthValid);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r7.requiresDigitValid);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r7.requiresUppercaseValid);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r7.requiresLowercaseValid);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r7.requiresSpecialCharsValid);\n  }\n}\nfunction RegisterComponent_div_41_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 23);\n    i0.ɵɵtext(1, \"Confirm password\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_41_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 23);\n    i0.ɵɵtext(1, \"Password must be at least 8 characters long\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_41_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 23);\n    i0.ɵɵtext(1, \"Passwords do not match\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_41_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 22);\n    i0.ɵɵtemplate(1, RegisterComponent_div_41_span_1_Template, 2, 0, \"span\", 14);\n    i0.ɵɵtemplate(2, RegisterComponent_div_41_span_2_Template, 2, 0, \"span\", 14);\n    i0.ɵɵtemplate(3, RegisterComponent_div_41_span_3_Template, 2, 0, \"span\", 14);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r8.f.confirmPassword.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r8.f.confirmPassword.errors[\"minLength\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r8.f.confirmPassword.errors[\"mismatch\"]);\n  }\n}\nexport class RegisterComponent {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n    this.passtype = \"Show\";\n    this.passConfirmtype = \"Show\";\n    this.submitted = false;\n    this.isWorking = false;\n    this.userExists = false;\n    this.genericError = false;\n    this.success = false;\n    this.signupForm = new FormGroup({\n      firstName: new FormControl(null, Validators.compose([Validators.required, Validators.minLength(3)])),\n      lastName: new FormControl(null, Validators.compose([Validators.required, Validators.minLength(3)])),\n      username: new FormControl(null, Validators.compose([Validators.required, Validators.minLength(3)])),\n      password: new FormControl(null, Validators.compose([Validators.required, Validators.minLength(8), PasswordValidators.patternValidator(new RegExp('(?=.*[0-9])'), {\n        requiresDigit: true\n      }), PasswordValidators.patternValidator(new RegExp(\"(?=.*[A-Z])\"), {\n        requiresUppercase: true\n      }), PasswordValidators.patternValidator(new RegExp(\"(?=.*[a-z])\"), {\n        requiresLowercase: true\n      }), PasswordValidators.patternValidator(new RegExp(\"(?=.*[$@^!%*?&])\"), {\n        requiresSpecialChars: true\n      })])),\n      confirmPassword: new FormControl(null, [Validators.required, Validators.minLength(8)])\n    }, {\n      validators: PasswordValidators.MatchValidator\n    });\n  }\n  get f() {\n    return this.signupForm.controls;\n  }\n  get requiredValid() {\n    return !this.signupForm.controls[\"password\"].hasError(\"required\");\n  }\n  get minLengthValid() {\n    return !this.signupForm.controls[\"password\"].hasError(\"minlength\");\n  }\n  get requiresDigitValid() {\n    return !this.signupForm.controls[\"password\"].hasError(\"requiresDigit\");\n  }\n  get requiresUppercaseValid() {\n    return !this.signupForm.controls[\"password\"].hasError(\"requiresUppercase\");\n  }\n  get requiresLowercaseValid() {\n    return !this.signupForm.controls[\"password\"].hasError(\"requiresLowercase\");\n  }\n  get requiresSpecialCharsValid() {\n    return !this.signupForm.controls[\"password\"].hasError(\"requiresSpecialChars\");\n  }\n  get passwordValid() {\n    return this.signupForm.controls[\"password\"].errors === null;\n  }\n  showPassword() {\n    this.inputType = !this.inputType;\n    if (this.inputType) {\n      this.passtype = \"Hide\";\n    } else {\n      this.type = \"Show\";\n    }\n  }\n  showConfirmPassword() {\n    this.inputType = !this.inputType;\n    if (this.inputType) {\n      this.passConfirmtype = \"Hide\";\n    } else {\n      this.passConfirmtype = \"Show\";\n    }\n  }\n  onSubmit() {\n    this.submitted = true;\n    if (this.signupForm.invalid) {\n      return;\n    }\n    this.user = {\n      firstName: this.signupForm.get('firstName').value,\n      lastName: this.signupForm.get('lastName').value,\n      username: this.signupForm.get('username').value,\n      password: this.signupForm.get('password').value\n    };\n    this.authService.register(this.user).subscribe(res => {\n      this.success = true;\n    }, err => {\n      if (err.error.message === \"Username already exists\") {\n        this.userExists = true;\n      } else {\n        this.genericError = true;\n      }\n    }, () => {\n      setTimeout(() => {\n        this.success = false;\n        this.router.navigate(['login']);\n      }, 2000);\n    });\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.Router));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  inputs: {\n    passtype: \"passtype\",\n    passConfirmtype: \"passConfirmtype\"\n  },\n  decls: 43,\n  vars: 14,\n  consts: [[1, \"form-bg\"], [\"class\", \"success-popup\", 4, \"ngIf\"], [1, \"sign\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-container\"], [\"for\", \"firstName\", 1, \"label\"], [1, \"input-div\"], [\"type\", \"text\", \"formControlName\", \"firstName\", 1, \"field-input\"], [\"class\", \"error\", 4, \"ngIf\"], [\"for\", \"lastName\", 1, \"label\"], [\"type\", \"text\", \"formControlName\", \"lastName\", 1, \"field-input\"], [\"clas\", \"\", 1, \"form-container\"], [\"for\", \"username\", 1, \"label\"], [\"type\", \"text\", \"formControlName\", \"username\", 1, \"field-input\"], [\"class\", \"danger\", 4, \"ngIf\"], [\"for\", \"password\", 1, \"label\"], [\"formControlName\", \"password\", 1, \"field-input\", 3, \"type\"], [1, \"show\", 3, \"click\"], [\"for\", \"confirmPassword\", 1, \"label\"], [\"formControlName\", \"confirmPassword\", 1, \"field-input\", 3, \"type\"], [\"type\", \"submit\", \"value\", \"Sign\", 1, \"submit-btn\"], [1, \"success-popup\"], [1, \"error\"], [1, \"danger\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, RegisterComponent_div_1_Template, 2, 0, \"div\", 1);\n      i0.ɵɵelementStart(2, \"span\", 2);\n      i0.ɵɵtext(3, \"Create an account\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"form\", 3);\n      i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_4_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(5, \"div\", 4)(6, \"label\", 5);\n      i0.ɵɵtext(7, \"First Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"div\", 6);\n      i0.ɵɵelement(9, \"input\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(10, RegisterComponent_div_10_Template, 3, 2, \"div\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"div\", 4)(12, \"label\", 9);\n      i0.ɵɵtext(13, \"Last Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"div\", 6);\n      i0.ɵɵelement(15, \"input\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(16, RegisterComponent_div_16_Template, 3, 2, \"div\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"div\", 11)(18, \"label\", 12);\n      i0.ɵɵtext(19, \"Username\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"div\", 6);\n      i0.ɵɵelement(21, \"input\", 13);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(22, RegisterComponent_div_22_Template, 3, 2, \"div\", 8);\n      i0.ɵɵtemplate(23, RegisterComponent_span_23_Template, 2, 0, \"span\", 14);\n      i0.ɵɵtemplate(24, RegisterComponent_span_24_Template, 2, 0, \"span\", 14);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(25, \"div\", 4)(26, \"label\", 15);\n      i0.ɵɵtext(27, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(28, \"div\", 6);\n      i0.ɵɵelement(29, \"input\", 16);\n      i0.ɵɵelementStart(30, \"span\", 17);\n      i0.ɵɵlistener(\"click\", function RegisterComponent_Template_span_click_30_listener() {\n        return ctx.showPassword();\n      });\n      i0.ɵɵtext(31);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(32, RegisterComponent_span_32_Template, 2, 0, \"span\", 14);\n      i0.ɵɵtemplate(33, RegisterComponent_div_33_Template, 6, 5, \"div\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(34, \"div\", 4)(35, \"label\", 18);\n      i0.ɵɵtext(36, \"Confirm password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(37, \"div\", 6);\n      i0.ɵɵelement(38, \"input\", 19);\n      i0.ɵɵelementStart(39, \"span\", 17);\n      i0.ɵɵlistener(\"click\", function RegisterComponent_Template_span_click_39_listener() {\n        return ctx.showConfirmPassword();\n      });\n      i0.ɵɵtext(40);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(41, RegisterComponent_div_41_Template, 4, 3, \"div\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(42, \"input\", 20);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.success);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formGroup\", ctx.signupForm);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", (ctx.f.firstName.dirty || ctx.submitted) && ctx.f.firstName.errors);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", (ctx.f.lastName.dirty || ctx.submitted) && ctx.f.lastName.errors);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", (ctx.f.username.dirty || ctx.submitted) && ctx.f.username.errors);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.userExists);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.genericError);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"type\", ctx.inputType ? \"text\" : \"password\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.type);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.f.password.dirty || ctx.submitted) && !ctx.requiredValid);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.requiredValid);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"type\", ctx.inputType ? \"text\" : \"password\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.type);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.submitted || ctx.f.confirmPassword.dirty) && ctx.f.confirmPassword.errors);\n    }\n  },\n  dependencies: [i3.NgIf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FormGroup","FormControl","Validators","PasswordValidators","i0","RegisterComponent","constructor","authService","router","firstName","compose","required","minLength","lastName","username","password","patternValidator","RegExp","requiresDigit","requiresUppercase","requiresLowercase","requiresSpecialChars","confirmPassword","validators","MatchValidator","f","signupForm","controls","requiredValid","hasError","minLengthValid","requiresDigitValid","requiresUppercaseValid","requiresLowercaseValid","requiresSpecialCharsValid","passwordValid","errors","showPassword","inputType","passtype","type","showConfirmPassword","passConfirmtype","onSubmit","submitted","invalid","user","get","value","register","subscribe","res","success","err","error","message","userExists","genericError","setTimeout","navigate","selectors","inputs","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/home/sam/Desktop/auth-front-end/src/app/components/register/register.component.ts","/home/sam/Desktop/auth-front-end/src/app/components/register/register.component.html"],"sourcesContent":["import { Component, Input } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { RegisterModel } from 'src/app/model/register.model';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { PasswordValidators } from 'src/app/utils/password-validators';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\n  @Input() passtype = \"Show\";\n  @Input() passConfirmtype = \"Show\";\n  submitted = false;\n  isWorking = false;\n  userExists = false;\n  genericError = false;\n  success = false;\n  inputType: boolean;\n\n  user: RegisterModel\n\n  constructor(private authService: AuthService, private router: Router) { }\n\n\n  signupForm = new FormGroup({\n    firstName: new FormControl(\n      null,\n      Validators.compose([\n        Validators.required,\n        Validators.minLength(3)\n      ])\n    ),\n    lastName: new FormControl(\n      null,\n      Validators.compose([\n        Validators.required,\n        Validators.minLength(3)\n      ])\n    ),\n    username: new FormControl(\n      null,\n      Validators.compose([\n        Validators.required,\n        Validators.minLength(3)\n      ])\n    ),\n    password: new FormControl(\n      null,\n      Validators.compose([\n        Validators.required,\n        Validators.minLength(8),\n        PasswordValidators.patternValidator(new RegExp('(?=.*[0-9])'), {\n          requiresDigit: true\n        }),\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[A-Z])\"), {\n          requiresUppercase: true\n        }),\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[a-z])\"), {\n          requiresLowercase: true\n        }),\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[$@^!%*?&])\"), {\n          requiresSpecialChars: true\n        })\n      ])\n    ),\n    confirmPassword: new FormControl(\n      null,\n      [\n        Validators.required,\n        Validators.minLength(8)\n\n      ])\n  },\n    {\n      validators: PasswordValidators.MatchValidator\n    }\n\n  );\n\n  get f() {\n    return this.signupForm.controls;\n  }\n  get requiredValid() {\n    return !this.signupForm.controls[\"password\"].hasError(\"required\");\n  }\n  get minLengthValid() {\n    return !this.signupForm.controls[\"password\"].hasError(\"minlength\");\n  }\n  get requiresDigitValid() {\n    return !this.signupForm.controls[\"password\"].hasError(\"requiresDigit\");\n  }\n  get requiresUppercaseValid() {\n    return !this.signupForm.controls[\"password\"].hasError(\"requiresUppercase\");\n  }\n  get requiresLowercaseValid() {\n    return !this.signupForm.controls[\"password\"].hasError(\"requiresLowercase\");\n  }\n  get requiresSpecialCharsValid() {\n    return !this.signupForm.controls[\"password\"].hasError(\"requiresSpecialChars\");\n  }\n  get passwordValid() {\n    return this.signupForm.controls[\"password\"].errors === null;\n  }\n\n  showPassword(){\n    this.inputType = !this.inputType\n    if(this.inputType){\n        this.passtype = \"Hide\"\n    }else{\n      this.type = \"Show\"\n    }\n  }\n  showConfirmPassword(){\n    this.inputType = !this.inputType\n    if(this.inputType){\n        this.passConfirmtype = \"Hide\"\n    }else{\n      this.passConfirmtype = \"Show\"\n    }\n  }\n  onSubmit() {\n    this.submitted = true;\n\n    if (this.signupForm.invalid) {\n      return;\n    }\n\n    this.user = {\n      firstName: this.signupForm.get('firstName').value,\n      lastName: this.signupForm.get('lastName').value,\n      username: this.signupForm.get('username').value,\n      password: this.signupForm.get('password').value\n    }\n\n    this.authService.register(this.user)\n      .subscribe((res) => {\n        this.success = true;\n      }, (err) => {\n\n        if (err.error.message === \"Username already exists\") {\n          this.userExists = true;\n        } else {\n          this.genericError = true;\n\n        }\n\n      }, () => {\n        setTimeout(() => {\n          this.success = false;\n          this.router.navigate(['login']);\n        },2000);\n      })\n\n\n\n  }\n\n}\n","<div class=\"form-bg\">\n    <div class=\"success-popup\" *ngIf=\"success\">Successfully registered user</div>\n    <span class=\"sign\">Create an account</span>\n    <form (ngSubmit)=\"onSubmit()\" [formGroup]=\"signupForm\">\n        <div class=\"form-container\">\n            <label class=\"label\" for=\"firstName\">First Name</label>\n            <div class=\"input-div\">\n                <input class=\"field-input\" type=\"text\" formControlName=\"firstName\">\n            </div>\n            <div class=\"error\" *ngIf=\"(f.firstName.dirty  || submitted) && f.firstName.errors\">\n                <span class=\"danger\" *ngIf=\"f.firstName.errors['required']\">First name is required </span>\n                <span class=\"danger\" *ngIf=\"f.firstName.errors['minlength']\">Must be at least 3 characters long</span>\n    \n            </div>\n        </div>\n        <div class=\"form-container\">\n            <label class=\"label\" for=\"lastName\">Last Name</label>\n            <div class=\"input-div\">\n                <input class=\"field-input\" type=\"text\" formControlName=\"lastName\">\n            </div>\n            <div class=\"error\" *ngIf=\"(f.lastName.dirty  || submitted) && f.lastName.errors\">\n                <span class=\"danger\" *ngIf=\"f.lastName.errors['required']\">Last name is required </span>\n                <span class=\"danger\" *ngIf=\"f.lastName.errors['minlength']\">Must be at least 3 characters long</span>\n    \n            </div>\n        </div>\n        <div clas class=\"form-container\">\n            <label class=\"label\" for=\"username\">Username</label>\n            <div class=\"input-div\">\n                <input class=\"field-input\" type=\"text\" formControlName=\"username\">\n\n            </div>\n            <div class=\"error\" *ngIf=\"(f.username.dirty  || submitted) && f.username.errors\">\n                <span class=\"danger\"  *ngIf=\"f.username.errors['required']\">Username is required </span>\n                <span class=\"danger\" *ngIf=\"f.username.errors['minlength']\">Must be at least 3 characters long</span>\n            </div>\n            <span class=\"danger\" *ngIf=\"userExists\">Username already exists</span>\n            <span class=\"danger\" *ngIf=\"genericError\">An error occurred, please try again.</span>\n        </div>\n        <div class=\"form-container\">\n            <label class=\"label\" for=\"password\">Password</label>\n            <div class=\"input-div\">\n                <input class=\"field-input\" [type]=\"inputType ? 'text': 'password'\" formControlName=\"password\">\n                <span class=\"show\" (click)=\"showPassword()\">{{type}}</span>\n            </div>\n            <span class=\"danger\" *ngIf=\"(f.password.dirty || submitted) && !requiredValid\">Password is required</span>\n            <div class=\"error\" *ngIf=\"requiredValid\">\n                <span class=\"danger\" *ngIf=\"!minLengthValid\"> Must be at least 8 characters long</span>\n                <span class=\"danger\" *ngIf=\"!requiresDigitValid\">Must contain at least 1 digit</span>\n                <span class=\"danger\" *ngIf=\"!requiresUppercaseValid\">Must contain at least 1 uppercase character</span>\n                <span class=\"danger\"  *ngIf=\"!requiresLowercaseValid\">Must contain at least 1 lowercase character</span>\n                <span class=\"danger\" *ngIf=\"!requiresSpecialCharsValid\"> Must contain at least 1 special character</span>\n            </div>\n        </div>\n        <div class=\"form-container\">\n            <label class=\"label\" for=\"confirmPassword\">Confirm password</label>\n           <div class=\"input-div\">\n            <input class=\"field-input\"  [type]=\"inputType ? 'text': 'password'\" formControlName=\"confirmPassword\">\n            <span class=\"show\" (click)=\"showConfirmPassword()\">{{type}}</span>\n           </div>\n            <div class=\"error\" *ngIf=\"(submitted || f.confirmPassword.dirty) && f.confirmPassword.errors\">\n                <span class=\"danger\" *ngIf=\"f.confirmPassword.errors['required']\">Confirm password</span>\n                <span class=\"danger\"   *ngIf=\"f.confirmPassword.errors['minLength']\">Password must be at least 8 characters long</span>\n                <span class=\"danger\" *ngIf=\"f.confirmPassword.errors['mismatch']\">Passwords do not match</span>\n            </div>\n        </div>\n        <input class=\"submit-btn\" type=\"submit\" value=\"Sign\">\n      \n    </form>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}