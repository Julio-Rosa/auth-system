{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-cookie-service\";\nexport class UserService {\n  constructor(http, cookieService) {\n    this.http = http;\n    this.cookieService = cookieService;\n    this.loginEndpoint = 'auth/authenticate';\n    this.registerEndpoint = 'auth/register';\n  }\n  me() {\n    return this.http.get(this.apiUrl, {\n      headers: new HttpHeaders().set('Authorization', this.cookieService.get('token'))\n    });\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CookieService));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;;;;AAQ9D,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB,EAAUC,aAA4B;IAAtD,SAAI,GAAJD,IAAI;IAAsB,kBAAa,GAAbC,aAAa;IAJnD,kBAAa,GAAI,mBAAmB;IACpC,qBAAgB,GAAG,eAAe;EAGoC;EAG9EC,EAAE;IACA,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAC,IAAI,CAACC,MAAM,EAAE;MAACC,OAAO,EAAE,IAAIR,WAAW,EAAE,CAACS,GAAG,CAAC,eAAe,EAAC,IAAI,CAACL,aAAa,CAACE,GAAG,CAAC,OAAO,CAAC;IAAE,CAAC,CAAC;EACvH;;AAVWL,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAS,SAAXT,WAAW;EAAAU,YAFV;AAAM","names":["HttpHeaders","UserService","constructor","http","cookieService","me","get","apiUrl","headers","set","factory","providedIn"],"sourceRoot":"","sources":["/home/sam/Desktop/auth-front-end/src/app/services/user.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { CookieService } from 'ngx-cookie-service';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private loginEndpoint =  'auth/authenticate';\n  private registerEndpoint = 'auth/register'\n  private domain: string | undefined;\n\n  constructor(private http: HttpClient, private cookieService: CookieService) { }\n\n\n  me(): Observable<any>{\n    return this.http.get(this.apiUrl, {headers: new HttpHeaders().set('Authorization',this.cookieService.get('token') )});\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}