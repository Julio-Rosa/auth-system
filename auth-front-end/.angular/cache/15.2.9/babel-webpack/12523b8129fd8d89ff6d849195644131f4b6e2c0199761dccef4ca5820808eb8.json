{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { PasswordValidators } from 'src/app/utils/password-validators';\nlet ResetPasswordComponent = class ResetPasswordComponent {\n  constructor(auService, router) {\n    this.auService = auService;\n    this.router = router;\n    this.submitted = false;\n    this.success = false;\n    this.samePassword = false;\n    this.incorrectPassword = false;\n    this.resetForm = new FormGroup({\n      oldPassword: new FormControl(null, [Validators.required, Validators.minLength(8)]),\n      password: new FormControl(null, Validators.compose([Validators.required, Validators.minLength(8), PasswordValidators.patternValidator(new RegExp('(?=.*[0-9])'), {\n        requiresDigit: true\n      }), PasswordValidators.patternValidator(new RegExp(\"(?=.*[A-Z])\"), {\n        requiresUppercase: true\n      }), PasswordValidators.patternValidator(new RegExp(\"(?=.*[a-z])\"), {\n        requiresLowercase: true\n      }), PasswordValidators.patternValidator(new RegExp(\"(?=.*[$@^!%*?&])\"), {\n        requiresSpecialChars: true\n      })])),\n      confirmPassword: new FormControl(null, [Validators.required, Validators.minLength(8)])\n    }, {\n      validators: PasswordValidators.MatchValidator\n    });\n  }\n  get f() {\n    return this.resetForm.controls;\n  }\n  get requiredValid() {\n    return !this.resetForm.controls[\"password\"].hasError(\"required\");\n  }\n  get minLengthValid() {\n    return !this.resetForm.controls[\"password\"].hasError(\"minlength\");\n  }\n  get requiresDigitValid() {\n    return !this.resetForm.controls[\"password\"].hasError(\"requiresDigit\");\n  }\n  get requiresUppercaseValid() {\n    return !this.resetForm.controls[\"password\"].hasError(\"requiresUppercase\");\n  }\n  get requiresLowercaseValid() {\n    return !this.resetForm.controls[\"password\"].hasError(\"requiresLowercase\");\n  }\n  get requiresSpecialCharsValid() {\n    return !this.resetForm.controls[\"password\"].hasError(\"requiresSpecialChars\");\n  }\n  get passwordValid() {\n    return this.resetForm.controls[\"password\"].errors === null;\n  }\n  showPassword() {\n    this.inputType = !this.inputType;\n  }\n  onSubmit() {\n    this.submitted = true;\n    if (this.resetForm.invalid) {\n      return;\n    }\n    this.user = {\n      password: this.resetForm.get('oldPassword').value,\n      newPassword: this.resetForm.get('password').value\n    };\n    this.resetPasswordService.reset(this.user).subscribe(res => {\n      this.success = true;\n      this.resetForm.reset();\n    }, err => {\n      if (err.error.message === \"The new password cannot be the same as the old password.\") {\n        this.samePassword = true;\n        setTimeout(() => {\n          this.samePassword = false;\n        }, 2000);\n      }\n      if (err.error.message === \"Incorrect password!\") {\n        this.incorrectPassword = true;\n        setTimeout(() => {\n          this.incorrectPassword = false;\n        }, 2000);\n      }\n    }, () => {\n      setTimeout(() => {\n        this.success = false;\n      }, 2000);\n    });\n  }\n};\nResetPasswordComponent = __decorate([Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.css']\n})], ResetPasswordComponent);\nexport { ResetPasswordComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAASC,SAAS,EAAEC,WAAW,EAAEC,UAAU,QAAQ,gBAAgB;AAEnE,SAASC,kBAAkB,QAAQ,mCAAmC;AAO/D,IAAMC,sBAAsB,GAA5B,MAAMA,sBAAsB;EAUjCC,YAAoBC,SAA+B,EAAUC,MAAc;IAAvD,cAAS,GAATD,SAAS;IAAgC,WAAM,GAANC,MAAM;IATnE,cAAS,GAAG,KAAK;IACjB,YAAO,GAAG,KAAK;IACf,iBAAY,GAAI,KAAK;IACrB,sBAAiB,GAAG,KAAK;IAQzB,cAAS,GAAG,IAAIP,SAAS,CAAC;MACxBQ,WAAW,EAAE,IAAIP,WAAW,CAC1B,IAAI,EACJ,CACEC,UAAU,CAACO,QAAQ,EACnBP,UAAU,CAACQ,SAAS,CAAC,CAAC,CAAC,CAExB,CACF;MAEDC,QAAQ,EAAE,IAAIV,WAAW,CACvB,IAAI,EACJC,UAAU,CAACU,OAAO,CAAC,CACjBV,UAAU,CAACO,QAAQ,EACnBP,UAAU,CAACQ,SAAS,CAAC,CAAC,CAAC,EACvBP,kBAAkB,CAACU,gBAAgB,CAAC,IAAIC,MAAM,CAAC,aAAa,CAAC,EAAE;QAC7DC,aAAa,EAAE;OAChB,CAAC,EACFZ,kBAAkB,CAACU,gBAAgB,CAAC,IAAIC,MAAM,CAAC,aAAa,CAAC,EAAE;QAC7DE,iBAAiB,EAAE;OACpB,CAAC,EACFb,kBAAkB,CAACU,gBAAgB,CAAC,IAAIC,MAAM,CAAC,aAAa,CAAC,EAAE;QAC7DG,iBAAiB,EAAE;OACpB,CAAC,EACFd,kBAAkB,CAACU,gBAAgB,CAAC,IAAIC,MAAM,CAAC,kBAAkB,CAAC,EAAE;QAClEI,oBAAoB,EAAE;OACvB,CAAC,CACH,CAAC,CACH;MACDC,eAAe,EAAE,IAAIlB,WAAW,CAC9B,IAAI,EACJ,CACEC,UAAU,CAACO,QAAQ,EACnBP,UAAU,CAACQ,SAAS,CAAC,CAAC,CAAC,CAExB;KACJ,EACC;MACEU,UAAU,EAAEjB,kBAAkB,CAACkB;KAChC,CACF;EA1C4E;EA4C7E,IAAIC,CAAC;IACH,OAAO,IAAI,CAACC,SAAS,CAACC,QAAQ;EAChC;EACA,IAAIC,aAAa;IACf,OAAO,CAAC,IAAI,CAACF,SAAS,CAACC,QAAQ,CAAC,UAAU,CAAC,CAACE,QAAQ,CAAC,UAAU,CAAC;EAClE;EACA,IAAIC,cAAc;IAChB,OAAO,CAAC,IAAI,CAACJ,SAAS,CAACC,QAAQ,CAAC,UAAU,CAAC,CAACE,QAAQ,CAAC,WAAW,CAAC;EACnE;EACA,IAAIE,kBAAkB;IACpB,OAAO,CAAC,IAAI,CAACL,SAAS,CAACC,QAAQ,CAAC,UAAU,CAAC,CAACE,QAAQ,CAAC,eAAe,CAAC;EACvE;EACA,IAAIG,sBAAsB;IACxB,OAAO,CAAC,IAAI,CAACN,SAAS,CAACC,QAAQ,CAAC,UAAU,CAAC,CAACE,QAAQ,CAAC,mBAAmB,CAAC;EAC3E;EACA,IAAII,sBAAsB;IACxB,OAAO,CAAC,IAAI,CAACP,SAAS,CAACC,QAAQ,CAAC,UAAU,CAAC,CAACE,QAAQ,CAAC,mBAAmB,CAAC;EAC3E;EACA,IAAIK,yBAAyB;IAC3B,OAAO,CAAC,IAAI,CAACR,SAAS,CAACC,QAAQ,CAAC,UAAU,CAAC,CAACE,QAAQ,CAAC,sBAAsB,CAAC;EAC9E;EACA,IAAIM,aAAa;IACf,OAAO,IAAI,CAACT,SAAS,CAACC,QAAQ,CAAC,UAAU,CAAC,CAACS,MAAM,KAAK,IAAI;EAC5D;EACAC,YAAY;IAEV,IAAI,CAACC,SAAS,GAAG,CAAC,IAAI,CAACA,SAAS;EAElC;EAEAC,QAAQ;IACN,IAAI,CAACC,SAAS,GAAG,IAAI;IAErB,IAAG,IAAI,CAACd,SAAS,CAACe,OAAO,EAAC;MACxB;;IAEF,IAAI,CAACC,IAAI,GAAG;MACV5B,QAAQ,EAAE,IAAI,CAACY,SAAS,CAACiB,GAAG,CAAC,aAAa,CAAC,CAACC,KAAK;MACjDC,WAAW,EAAE,IAAI,CAACnB,SAAS,CAACiB,GAAG,CAAC,UAAU,CAAC,CAACC;KAC7C;IACD,IAAI,CAACE,oBAAoB,CAACC,KAAK,CAAC,IAAI,CAACL,IAAI,CAAC,CACvCM,SAAS,CAAEC,GAAG,IAAG;MACd,IAAI,CAACC,OAAO,GAAG,IAAI;MACnB,IAAI,CAACxB,SAAS,CAACqB,KAAK,EAAE;IAE1B,CAAC,EAAGI,GAAG,IAAI;MACP,IAAGA,GAAG,CAACC,KAAK,CAACC,OAAO,KAAK,0DAA0D,EAAC;QAChF,IAAI,CAACC,YAAY,GAAG,IAAI;QACxBC,UAAU,CAAC,MAAK;UACd,IAAI,CAACD,YAAY,GAAG,KAAK;QAC3B,CAAC,EAAC,IAAI,CAAC;;MAEX,IAAGH,GAAG,CAACC,KAAK,CAACC,OAAO,KAAK,qBAAqB,EAAC;QAC7C,IAAI,CAACG,iBAAiB,GAAG,IAAI;QAC7BD,UAAU,CAAC,MAAK;UACd,IAAI,CAACC,iBAAiB,GAAG,KAAK;QAChC,CAAC,EAAC,IAAI,CAAC;;IAEb,CAAC,EAAC,MAAK;MACLD,UAAU,CAAC,MAAK;QACd,IAAI,CAACL,OAAO,GAAG,KAAK;MACtB,CAAC,EAAC,IAAI,CAAC;IACT,CAAC,CAAC;EAEN;CAED;AAxHY3C,sBAAsB,eALlCL,SAAS,CAAC;EACTuD,QAAQ,EAAE,oBAAoB;EAC9BC,WAAW,EAAE,iCAAiC;EAC9CC,SAAS,EAAE,CAAC,gCAAgC;CAC7C,CAAC,GACWpD,sBAAsB,CAwHlC;SAxHYA,sBAAsB","names":["Component","FormGroup","FormControl","Validators","PasswordValidators","ResetPasswordComponent","constructor","auService","router","oldPassword","required","minLength","password","compose","patternValidator","RegExp","requiresDigit","requiresUppercase","requiresLowercase","requiresSpecialChars","confirmPassword","validators","MatchValidator","f","resetForm","controls","requiredValid","hasError","minLengthValid","requiresDigitValid","requiresUppercaseValid","requiresLowercaseValid","requiresSpecialCharsValid","passwordValid","errors","showPassword","inputType","onSubmit","submitted","invalid","user","get","value","newPassword","resetPasswordService","reset","subscribe","res","success","err","error","message","samePassword","setTimeout","incorrectPassword","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/sam/Desktop/auth-front-end/src/app/components/reset-password/reset-password.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { PasswordValidators } from 'src/app/utils/password-validators';\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.css']\n})\nexport class ResetPasswordComponent {\n  submitted = false;\n  success = false;\n  samePassword =  false;\n  incorrectPassword = false;\n  inputType: boolean;\n  \n \n  user: {password: string, newPassword:string};\n\n  constructor(private auService: ResetPasswordService, private router: Router){}\n\n  resetForm = new FormGroup({\n    oldPassword: new FormControl(\n      null,\n      [\n        Validators.required,\n        Validators.minLength(8)\n\n      ]\n    ),\n  \n    password: new FormControl(\n      null,\n      Validators.compose([\n        Validators.required,\n        Validators.minLength(8),\n        PasswordValidators.patternValidator(new RegExp('(?=.*[0-9])'), {\n          requiresDigit: true\n        }),\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[A-Z])\"), {\n          requiresUppercase: true\n        }),\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[a-z])\"), {\n          requiresLowercase: true\n        }),\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[$@^!%*?&])\"), {\n          requiresSpecialChars: true\n        })\n      ])\n    ),\n    confirmPassword: new FormControl(\n      null,\n      [\n        Validators.required,\n        Validators.minLength(8)\n\n      ])\n  },\n    {\n      validators: PasswordValidators.MatchValidator\n    }\n  );\n\n  get f() {\n    return this.resetForm.controls;\n  }\n  get requiredValid() {\n    return !this.resetForm.controls[\"password\"].hasError(\"required\");\n  }\n  get minLengthValid() {\n    return !this.resetForm.controls[\"password\"].hasError(\"minlength\");\n  }\n  get requiresDigitValid() {\n    return !this.resetForm.controls[\"password\"].hasError(\"requiresDigit\");\n  }\n  get requiresUppercaseValid() {\n    return !this.resetForm.controls[\"password\"].hasError(\"requiresUppercase\");\n  }\n  get requiresLowercaseValid() {\n    return !this.resetForm.controls[\"password\"].hasError(\"requiresLowercase\");\n  }\n  get requiresSpecialCharsValid() {\n    return !this.resetForm.controls[\"password\"].hasError(\"requiresSpecialChars\");\n  }\n  get passwordValid() {\n    return this.resetForm.controls[\"password\"].errors === null;\n  }\n  showPassword(){\n   \n    this.inputType = !this.inputType;\n \n  }\n\n  onSubmit() {\n    this.submitted = true;\n\n    if(this.resetForm.invalid){\n      return;\n    }\n    this.user = {\n      password: this.resetForm.get('oldPassword').value,\n      newPassword: this.resetForm.get('password').value\n    }\n    this.resetPasswordService.reset(this.user)\n      .subscribe((res)=> {\n          this.success = true;\n          this.resetForm.reset()\n          \n      }, (err) => {\n          if(err.error.message === \"The new password cannot be the same as the old password.\"){\n              this.samePassword = true;\n              setTimeout(() => {\n                this.samePassword = false;\n              },2000);\n          }\n          if(err.error.message === \"Incorrect password!\"){\n            this.incorrectPassword = true;\n            setTimeout(() => {\n              this.incorrectPassword = false;\n            },2000);\n          }\n      },() => {\n        setTimeout(() => {\n          this.success = false;\n        },2000);\n      })\n    \n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}