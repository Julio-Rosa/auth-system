{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/guard.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthorizedGuard {\n  constructor(guardService, router) {\n    this.guardService = guardService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    const isAuthorized = this.guardService.authorized();\n    if (isAuthorized) {\n      return true;\n    }\n    this.router.navigate(['/login']);\n    return false;\n  }\n}\nAuthorizedGuard.ɵfac = function AuthorizedGuard_Factory(t) {\n  return new (t || AuthorizedGuard)(i0.ɵɵinject(i1.GuardService), i0.ɵɵinject(i2.Router));\n};\nAuthorizedGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthorizedGuard,\n  factory: AuthorizedGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,eAAe;EAC1BC,YAAoBC,YAA0B,EAAUC,MAAc;IAAlD,iBAAY,GAAZD,YAAY;IAAwB,WAAM,GAANC,MAAM;EAAY;EAC1EC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAC1B,MAAMC,YAAY,GAAG,IAAI,CAACL,YAAY,CAACM,UAAU,EAAE;IACnD,IAAID,YAAY,EAAE;MAChB,OAAO,IAAI;;IAEb,IAAI,CAACJ,MAAM,CAACM,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAChC,OAAO,KAAK;EAGd;;AAbWT,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAU,SAAfV,eAAe;EAAAW,YAFd;AAAM","names":["AuthorizedGuard","constructor","guardService","router","canActivate","route","state","isAuthorized","authorized","navigate","factory","providedIn"],"sourceRoot":"","sources":["/home/sam/Desktop/auth-front-end/src/app/guards/authorized.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { GuardService } from '../services/guard.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthorizedGuard implements CanActivate {\n  constructor(private guardService: GuardService, private router: Router) { }\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    const isAuthorized = this.guardService.authorized();\n    if (isAuthorized) {\n      return true;\n    }\n    this.router.navigate(['/login']);\n    return false;\n   \n    \n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}