{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-cookie-service\";\nimport * as i3 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, cookieService, router) {\n    this.http = http;\n    this.cookieService = cookieService;\n    this.router = router;\n    this.loginEndpoint = 'auth/authenticate';\n    this.registerEndpoint = 'auth/register';\n    this.resetEndpoint = 'user/reset-password';\n    this.domain = environment.api;\n  }\n  login(username, password) {\n    return this.http.post(`${this.domain}${this.loginEndpoint}`, {\n      username,\n      password\n    });\n  }\n  register(request) {\n    return this.http.post(`${this.domain}${this.registerEndpoint}`, request);\n  }\n  reset(user) {\n    return this.http.put(`${this.domain}${this.resetEndpoint}`, user, {\n      headers: new HttpHeaders().set('Authorization', this.cookieService.get('token'))\n    });\n  }\n  logOut() {\n    this.cookieService.delete('');\n    console.log(this.cookieService.get('token'));\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CookieService), i0.ɵɵinject(i3.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,WAAW,QAAQ,8BAA8B;AAC1D,SAAqBC,WAAW,QAAQ,sBAAsB;;;;;AAS9D,OAAM,MAAOC,WAAW;EAMtBC,YAAoBC,IAAgB,EAAUC,aAA4B,EAAUC,MAAc;IAA9E,SAAI,GAAJF,IAAI;IAAsB,kBAAa,GAAbC,aAAa;IAAyB,WAAM,GAANC,MAAM;IALlF,kBAAa,GAAG,mBAAmB;IACnC,qBAAgB,GAAG,eAAe;IAClC,kBAAa,GAAG,qBAAqB;IAI3C,IAAI,CAACC,MAAM,GAAGP,WAAW,CAACQ,GAAG;EAC/B;EAEAC,KAAK,CAACC,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAC,GAAG,IAAI,CAACL,MAAM,GAAG,IAAI,CAACM,aAAa,EAAE,EAAE;MAAEH,QAAQ;MAAEC;IAAQ,CAAE,CAAC;EACtF;EACAG,QAAQ,CAACC,OAAsB;IAC7B,OAAO,IAAI,CAACX,IAAI,CAACQ,IAAI,CAAM,GAAG,IAAI,CAACL,MAAM,GAAG,IAAI,CAACS,gBAAgB,EAAE,EAAED,OAAO,CAAC;EAC/E;EACAE,KAAK,CAACC,IAAI;IACR,OAAO,IAAI,CAACd,IAAI,CAACe,GAAG,CAAC,GAAG,IAAI,CAACZ,MAAM,GAAG,IAAI,CAACa,aAAa,EAAE,EAACF,IAAI,EAAC;MAACG,OAAO,EAAE,IAAIpB,WAAW,EAAE,CAACqB,GAAG,CAAC,eAAe,EAAC,IAAI,CAACjB,aAAa,CAACkB,GAAG,CAAC,OAAO,CAAC;IAAE,CAAC,CAAC;EACrJ;EAEAC,MAAM;IACJ,IAAI,CAACnB,aAAa,CAACoB,MAAM,CAAC,EAAE,CAAC;IAC7BC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACtB,aAAa,CAACkB,GAAG,CAAC,OAAO,CAAC,CAAC;EAC9C;;AAvBWrB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA0B,SAAX1B,WAAW;EAAA2B,YAFV;AAAM","names":["environment","HttpHeaders","AuthService","constructor","http","cookieService","router","domain","api","login","username","password","post","loginEndpoint","register","request","registerEndpoint","reset","user","put","resetEndpoint","headers","set","get","logOut","delete","console","log","factory","providedIn"],"sourceRoot":"","sources":["/home/sam/Desktop/auth-front-end/src/app/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { RegisterModel } from '../model/register.model';\nimport { CookieService } from 'ngx-cookie-service';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private loginEndpoint = 'auth/authenticate';\n  private registerEndpoint = 'auth/register';\n  private resetEndpoint = 'user/reset-password';\n  private domain: string | undefined;\n\n  constructor(private http: HttpClient, private cookieService: CookieService, private router: Router) {\n    this.domain = environment.api;\n  }\n\n  login(username: string, password: string): Observable<any> {\n    return this.http.post(`${this.domain}${this.loginEndpoint}`, { username, password });\n  }\n  register(request: RegisterModel): Observable<any> {\n    return this.http.post<any>(`${this.domain}${this.registerEndpoint}`, request);\n  }\n  reset(user): Observable<any>{\n    return this.http.put(`${this.domain}${this.resetEndpoint}`,user,{headers: new HttpHeaders().set('Authorization',this.cookieService.get('token') )});\n  }\n\n  logOut(){\n    this.cookieService.delete('');\n    console.log(this.cookieService.get('token'));\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}