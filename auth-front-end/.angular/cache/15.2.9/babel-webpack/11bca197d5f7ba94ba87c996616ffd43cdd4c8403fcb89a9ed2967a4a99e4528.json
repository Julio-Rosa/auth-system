{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nlet LoginComponent = class LoginComponent {\n  constructor(authService, router, cookieService, authorizedService) {\n    this.authService = authService;\n    this.router = router;\n    this.cookieService = cookieService;\n    this.authorizedService = authorizedService;\n    this.btnText = \"Login\";\n    this.badCredential = false;\n    this.genericError = false;\n  }\n  ngOnInit() {\n    this.loginForm = new FormGroup({\n      username: new FormControl('', [Validators.required]),\n      password: new FormControl('', [Validators.required])\n    });\n  }\n  showPassword() {\n    this.inputType = !this.inputType;\n  }\n  get username() {\n    return this.loginForm.get('username');\n  }\n  get password() {\n    return this.loginForm.get('password');\n  }\n  submit() {\n    if (this.loginForm.invalid) {\n      return;\n    }\n    this.authService.login(this.loginForm.get('username')?.value, this.loginForm.get('password')?.value).subscribe(res => {\n      this.token = res;\n      console.log(this.token.token);\n      this.cookieService.delete('token');\n      this.cookieService.set('token', `Bearer ${this.token.token}`);\n    }, err => {\n      this.loginForm.reset();\n      if (err.error.status === 500) {\n        this.badCredential = true;\n      } else {\n        this.genericError = true;\n        setTimeout(() => {\n          this.genericError = false;\n        }, 4000);\n      }\n    }, () => {\n      this.router.navigate(['user/me']);\n    });\n  }\n};\n__decorate([Input()], LoginComponent.prototype, \"btnText\", void 0);\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAEC,KAAK,QAAQ,eAAe;AAChD,SAASC,SAAS,EAAEC,WAAW,EAAEC,UAAU,QAAQ,gBAAgB;AAU5D,IAAMC,cAAc,GAApB,MAAMA,cAAc;EASzBC,YAAoBC,WAAwB,EAAUC,MAAc,EAAUC,aAA2B,EAAUC,iBAAoC;IAAnI,gBAAW,GAAXH,WAAW;IAAuB,WAAM,GAANC,MAAM;IAAkB,kBAAa,GAAbC,aAAa;IAAwB,sBAAiB,GAAjBC,iBAAiB;IAR3H,YAAO,GAAG,OAAO;IAG1B,kBAAa,GAAG,KAAK;IACrB,iBAAY,GAAG,KAAK;EAIwI;EAE5JC,QAAQ;IACN,IAAI,CAACC,SAAS,GAAG,IAAIV,SAAS,CAAC;MAC7BW,QAAQ,EAAE,IAAIV,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACU,QAAQ,CAAC,CAAC;MACpDC,QAAQ,EAAE,IAAIZ,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACU,QAAQ,CAAC;KACpD,CAAC;EAKJ;EAEAE,YAAY;IACV,IAAI,CAACC,SAAS,GAAG,CAAC,IAAI,CAACA,SAAS;EAClC;EAEA,IAAIJ,QAAQ;IACV,OAAO,IAAI,CAACD,SAAS,CAACM,GAAG,CAAC,UAAU,CAAE;EACxC;EACA,IAAIH,QAAQ;IACV,OAAO,IAAI,CAACH,SAAS,CAACM,GAAG,CAAC,UAAU,CAAE;EACxC;EACAC,MAAM;IACJ,IAAI,IAAI,CAACP,SAAS,CAACQ,OAAO,EAAE;MAC1B;;IAEF,IAAI,CAACb,WAAW,CAACc,KAAK,CAAC,IAAI,CAACT,SAAS,CAACM,GAAG,CAAC,UAAU,CAAC,EAAEI,KAAK,EAAE,IAAI,CAACV,SAAS,CAACM,GAAG,CAAC,UAAU,CAAC,EAAEI,KAAK,CAAC,CACjGC,SAAS,CAAEC,GAAG,IAAI;MACjB,IAAI,CAACC,KAAK,GAAGD,GAAG;MAChBE,OAAO,CAACC,GAAG,CAAC,IAAI,CAACF,KAAK,CAACA,KAAK,CAAC;MAC7B,IAAI,CAAChB,aAAa,CAACmB,MAAM,CAAC,OAAO,CAAC;MAClC,IAAI,CAACnB,aAAa,CAACoB,GAAG,CAAC,OAAO,EAAC,UAAU,IAAI,CAACJ,KAAK,CAACA,KAAK,EAAE,CAAC;IAC9D,CAAC,EAAGK,GAAG,IAAI;MACT,IAAI,CAAClB,SAAS,CAACmB,KAAK,EAAE;MACtB,IAAID,GAAG,CAACE,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QAC5B,IAAI,CAACC,aAAa,GAAG,IAAI;OAC1B,MAAI;QACH,IAAI,CAACC,YAAY,GAAG,IAAI;QACxBC,UAAU,CAAC,MAAK;UACd,IAAI,CAACD,YAAY,GAAG,KAAK;QAE3B,CAAC,EAAC,IAAI,CAAC;;IAIX,CAAC,EAAE,MAAK;MACN,IAAI,CAAC3B,MAAM,CAAC6B,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC;IACnC,CAAC,CAAC;EAGN;CAED;AA7DUC,YAARrC,KAAK,EAAE,+CAAmB;AADhBI,cAAc,eAL1BL,SAAS,CAAC;EACTuC,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,GACWpC,cAAc,CA8D1B;SA9DYA,cAAc","names":["Component","Input","FormGroup","FormControl","Validators","LoginComponent","constructor","authService","router","cookieService","authorizedService","ngOnInit","loginForm","username","required","password","showPassword","inputType","get","submit","invalid","login","value","subscribe","res","token","console","log","delete","set","err","reset","error","status","badCredential","genericError","setTimeout","navigate","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/sam/Desktop/auth-front-end/src/app/components/login/login.component.ts"],"sourcesContent":["import { Component, Input } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { CookieService } from 'ngx-cookie-service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n  @Input() btnText = \"Login\";\n\n  loginForm!: FormGroup;\n  badCredential = false;\n  genericError = false;\n  token: TokenModel;\n  inputType: boolean\n\n  constructor(private authService: AuthService, private router: Router, private cookieService: CookieServic, private authorizedService: AuthorizedService ) { }\n\n  ngOnInit(): void {\n    this.loginForm = new FormGroup({\n      username: new FormControl('', [Validators.required]),\n      password: new FormControl('', [Validators.required])\n    });\n\n\n   \n   \n  }\n\n  showPassword(){\n    this.inputType = !this.inputType\n  }\n\n  get username() {\n    return this.loginForm.get('username')!;\n  }\n  get password() {\n    return this.loginForm.get('password')!;\n  }\n  submit() {\n    if (this.loginForm.invalid) {\n      return;\n    }\n    this.authService.login(this.loginForm.get('username')?.value, this.loginForm.get('password')?.value)\n      .subscribe((res) => {\n        this.token = res;\n        console.log(this.token.token);\n        this.cookieService.delete('token');\n        this.cookieService.set('token',`Bearer ${this.token.token}`);\n      }, (err) => {\n        this.loginForm.reset()\n        if (err.error.status === 500) {\n          this.badCredential = true;\n        }else{\n          this.genericError = true;\n          setTimeout(() => {\n            this.genericError = false;\n            \n          },4000);\n          \n        }\n\n      }, () => {\n        this.router.navigate(['user/me']);\n      })\n\n\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}