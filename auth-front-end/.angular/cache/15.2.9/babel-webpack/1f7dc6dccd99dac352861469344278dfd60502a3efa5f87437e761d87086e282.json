{"ast":null,"code":"import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ngx-cookie-service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nfunction LoginComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtext(1, \"An error occurred, please try again.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15)(1, \"p\", 16);\n    i0.ɵɵtext(2, \"Username is required!\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction LoginComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15)(1, \"p\", 16);\n    i0.ɵɵtext(2, \"Password is required!\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction LoginComponent_div_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15)(1, \"p\", 16);\n    i0.ɵɵtext(2, \"Incorrect username or password\");\n    i0.ɵɵelementEnd()();\n  }\n}\nexport class LoginComponent {\n  constructor(authService, router, cookieService) {\n    this.authService = authService;\n    this.router = router;\n    this.cookieService = cookieService;\n    this.btnText = \"Login\";\n    this.clicked = false;\n    this.badCredential = false;\n    this.genericError = false;\n    this.inputType = false;\n    this.type = \"Show\";\n  }\n  ngOnInit() {\n    this.loginForm = new FormGroup({\n      username: new FormControl('', [Validators.required]),\n      password: new FormControl('', [Validators.required])\n    });\n  }\n  inputClicked() {\n    this.clicked = !this.clicked;\n    console.log(this.clicked);\n  }\n  showPassword() {\n    this.inputType = !this.inputType;\n    if (this.inputType) {\n      this.type = \"Hide\";\n    } else {\n      this.type = \"Show\";\n    }\n  }\n  get username() {\n    return this.loginForm.get('username');\n  }\n  get password() {\n    return this.loginForm.get('password');\n  }\n  submit() {\n    if (this.loginForm.invalid) {\n      return;\n    }\n    this.authService.login(this.loginForm.get('username')?.value, this.loginForm.get('password')?.value).subscribe(res => {\n      this.token = res;\n      this.cookieService.delete('token');\n      this.cookieService.set('token', `Bearer ${this.token.token}`);\n    }, err => {\n      this.loginForm.reset();\n      if (err.error.status === 500) {\n        this.loginForm.dirty();\n        this.badCredential = true;\n      } else {\n        this.genericError = true;\n        setTimeout(() => {\n          this.genericError = false;\n        }, 4000);\n      }\n    }, () => {\n      this.router.navigate(['user/me']);\n    });\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.CookieService));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  inputs: {\n    btnText: \"btnText\",\n    type: \"type\"\n  },\n  decls: 22,\n  vars: 7,\n  consts: [[1, \"form-bg\"], [\"class\", \"error-popup\", 4, \"ngIf\"], [1, \"sign\"], [3, \"formGroup\", \"ngSubmit\"], [\"formDir\", \"ngForm\"], [1, \"form-container\"], [\"for\", \"username\", 1, \"label\"], [1, \"input-div\"], [\"type\", \"text\", \"formControlName\", \"username\", \"required\", \"\", 1, \"field-input\"], [\"class\", \"error\", 4, \"ngIf\"], [\"for\", \"password\", 1, \"label\"], [\"formControlName\", \"password\", \"required\", \"\", 1, \"field-input\", 3, \"type\"], [1, \"show\", 3, \"click\"], [\"type\", \"submit\", \"value\", \"Continue\", 1, \"submit-btn\"], [1, \"error-popup\"], [1, \"error\"], [1, \"danger\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, LoginComponent_div_1_Template, 2, 0, \"div\", 1);\n      i0.ɵɵelementStart(2, \"span\", 2);\n      i0.ɵɵtext(3, \"Sign in to your account\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"form\", 3, 4);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_4_listener() {\n        return ctx.submit();\n      });\n      i0.ɵɵelementStart(6, \"div\", 5)(7, \"label\", 6);\n      i0.ɵɵtext(8, \"Username\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"div\", 7);\n      i0.ɵɵelement(10, \"input\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(11, LoginComponent_div_11_Template, 3, 0, \"div\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"div\", 5)(13, \"label\", 10);\n      i0.ɵɵtext(14, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"div\", 7);\n      i0.ɵɵelement(16, \"input\", 11);\n      i0.ɵɵelementStart(17, \"span\", 12);\n      i0.ɵɵlistener(\"click\", function LoginComponent_Template_span_click_17_listener() {\n        return ctx.showPassword();\n      });\n      i0.ɵɵtext(18);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(19, LoginComponent_div_19_Template, 3, 0, \"div\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(20, LoginComponent_div_20_Template, 3, 0, \"div\", 9);\n      i0.ɵɵelement(21, \"input\", 13);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      const _r1 = i0.ɵɵreference(5);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.genericError);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.username.invalid && _r1.submitted);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"type\", ctx.inputType ? \"text\" : \"password\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.type);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.password.invalid && _r1.submitted);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.badCredential);\n    }\n  },\n  dependencies: [i4.NgIf, i5.ɵNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.RequiredValidator, i5.FormGroupDirective, i5.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAASA,SAAS,EAAEC,WAAW,EAAEC,UAAU,QAAQ,gBAAgB;;;;;;;;;ICA/DC,+BAA8C;IAAAA,oDAAoC;IAAAA,iBAAM;;;;;IAShFA,+BAAiE;IAC3CA,qCAAqB;IAAAA,iBAAI;;;;;IAU/CA,+BAAiE;IAC3CA,qCAAqB;IAAAA,iBAAI;;;;;IAGnDA,+BAAyC;IACnBA,8CAA8B;IAAAA,iBAAI;;;ADbhE,OAAM,MAAOC,cAAc;EAUzBC,YAAoBC,WAAwB,EAAUC,MAAc,EAAUC,aAA4B;IAAtF,gBAAW,GAAXF,WAAW;IAAuB,WAAM,GAANC,MAAM;IAAkB,kBAAa,GAAbC,aAAa;IATlF,YAAO,GAAG,OAAO;IAC1B,YAAO,GAAY,KAAK;IAExB,kBAAa,GAAG,KAAK;IACrB,iBAAY,GAAG,KAAK;IAEpB,cAAS,GAAG,KAAK;IACR,SAAI,GAAG,MAAM;EAEwF;EAE9GC,QAAQ;IACN,IAAI,CAACC,SAAS,GAAG,IAAIV,SAAS,CAAC;MAC7BW,QAAQ,EAAE,IAAIV,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACU,QAAQ,CAAC,CAAC;MACpDC,QAAQ,EAAE,IAAIZ,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACU,QAAQ,CAAC;KACpD,CAAC;EAKJ;EACAE,YAAY;IACV,IAAI,CAACC,OAAO,GAAG,CAAC,IAAI,CAACA,OAAO;IAC5BC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACF,OAAO,CAAC;EAC3B;EAEAG,YAAY;IACV,IAAI,CAACC,SAAS,GAAG,CAAC,IAAI,CAACA,SAAS;IAChC,IAAG,IAAI,CAACA,SAAS,EAAC;MACd,IAAI,CAACC,IAAI,GAAG,MAAM;KACrB,MAAI;MACH,IAAI,CAACA,IAAI,GAAG,MAAM;;EAEtB;EAEA,IAAIT,QAAQ;IACV,OAAO,IAAI,CAACD,SAAS,CAACW,GAAG,CAAC,UAAU,CAAE;EACxC;EACA,IAAIR,QAAQ;IACV,OAAO,IAAI,CAACH,SAAS,CAACW,GAAG,CAAC,UAAU,CAAE;EACxC;EACAC,MAAM;IACJ,IAAI,IAAI,CAACZ,SAAS,CAACa,OAAO,EAAE;MAC1B;;IAEF,IAAI,CAACjB,WAAW,CAACkB,KAAK,CAAC,IAAI,CAACd,SAAS,CAACW,GAAG,CAAC,UAAU,CAAC,EAAEI,KAAK,EAAE,IAAI,CAACf,SAAS,CAACW,GAAG,CAAC,UAAU,CAAC,EAAEI,KAAK,CAAC,CACjGC,SAAS,CAAEC,GAAG,IAAI;MACjB,IAAI,CAACC,KAAK,GAAGD,GAAG;MAChB,IAAI,CAACnB,aAAa,CAACqB,MAAM,CAAC,OAAO,CAAC;MAClC,IAAI,CAACrB,aAAa,CAACsB,GAAG,CAAC,OAAO,EAAC,UAAU,IAAI,CAACF,KAAK,CAACA,KAAK,EAAE,CAAC;IAC9D,CAAC,EAAGG,GAAG,IAAI;MACT,IAAI,CAACrB,SAAS,CAACsB,KAAK,EAAE;MACtB,IAAID,GAAG,CAACE,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QAC5B,IAAI,CAACxB,SAAS,CAACyB,KAAK,EAAE;QACtB,IAAI,CAACC,aAAa,GAAG,IAAI;OAC1B,MAAI;QACH,IAAI,CAACC,YAAY,GAAG,IAAI;QACxBC,UAAU,CAAC,MAAK;UACd,IAAI,CAACD,YAAY,GAAG,KAAK;QAE3B,CAAC,EAAC,IAAI,CAAC;;IAIX,CAAC,EAAE,MAAK;MACN,IAAI,CAAC9B,MAAM,CAACgC,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC;IACnC,CAAC,CAAC;EAGN;;AAtEWnC,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAAoC;EAAAC;IAAAC;IAAAtB;EAAA;EAAAuB;EAAAC;EAAAC;EAAAC;IAAA;MCb3B3C,8BAAqB;MACjBA,+DAAwF;MAExFA,+BAAmB;MAAAA,uCAAuB;MAAAA,iBAAO;MACjDA,kCAAsE;MAAhEA;QAAA,OAAY4C,YAAQ;MAAA,EAAC;MACvB5C,8BAA4B;MACWA,wBAAQ;MAAAA,iBAAQ;MACnDA,8BAAuB;MACnBA,4BAAiG;MACrGA,iBAAM;MACNA,iEAGM;MACVA,iBAAM;MACNA,+BAA6B;MACUA,yBAAQ;MAAAA,iBAAQ;MACnDA,+BAAuB;MACnBA,6BAAuG;MACvGA,iCAA4C;MAAzBA;QAAA,OAAS4C,kBAAc;MAAA,EAAC;MAAC5C,aAAQ;MAAAA,iBAAO;MAE/DA,iEAEM;MACVA,iBAAM;MACNA,iEAEM;MAENA,6BAAyD;MAG7DA,iBAAO;;;;MA/BmBA,eAAkB;MAAlBA,uCAAkB;MAGhBA,eAAuB;MAAvBA,yCAAuB;MAMvBA,eAA2C;MAA3CA,4DAA2C;MAQ/BA,eAAuC;MAAvCA,0DAAuC;MACvBA,eAAQ;MAARA,8BAAQ;MAEpCA,eAA2C;MAA3CA,4DAA2C;MAI/CA,eAAmB;MAAnBA,wCAAmB","names":["FormGroup","FormControl","Validators","i0","LoginComponent","constructor","authService","router","cookieService","ngOnInit","loginForm","username","required","password","inputClicked","clicked","console","log","showPassword","inputType","type","get","submit","invalid","login","value","subscribe","res","token","delete","set","err","reset","error","status","dirty","badCredential","genericError","setTimeout","navigate","selectors","inputs","btnText","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/home/sam/Desktop/auth-front-end/src/app/components/login/login.component.ts","/home/sam/Desktop/auth-front-end/src/app/components/login/login.component.html"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport {CookieService} from 'ngx-cookie-service';\nimport { TokenModel } from 'src/app/model/token.model';\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  @Input() btnText = \"Login\";\n  clicked: boolean = false;\n  loginForm!: FormGroup;\n  badCredential = false;\n  genericError = false;\n  token!: TokenModel;\n  inputType = false;\n  @Input() type = \"Show\";\n\n  constructor(private authService: AuthService, private router: Router, private cookieService: CookieService) { }\n\n  ngOnInit(): void {\n    this.loginForm = new FormGroup({\n      username: new FormControl('', [Validators.required]),\n      password: new FormControl('', [Validators.required])\n    });\n\n\n   \n   \n  }\n  inputClicked(){\n    this.clicked = !this.clicked;\n    console.log(this.clicked)\n  }\n\n  showPassword(){\n    this.inputType = !this.inputType\n    if(this.inputType){\n        this.type = \"Hide\"\n    }else{\n      this.type = \"Show\"\n    }\n  }\n\n  get username() {\n    return this.loginForm.get('username')!;\n  }\n  get password() {\n    return this.loginForm.get('password')!;\n  }\n  submit() {\n    if (this.loginForm.invalid) {\n      return;\n    }\n    this.authService.login(this.loginForm.get('username')?.value, this.loginForm.get('password')?.value)\n      .subscribe((res) => {\n        this.token = res;\n        this.cookieService.delete('token');\n        this.cookieService.set('token',`Bearer ${this.token.token}`);\n      }, (err) => {\n        this.loginForm.reset()\n        if (err.error.status === 500) {\n          this.loginForm.dirty()\n          this.badCredential = true;\n        }else{\n          this.genericError = true;\n          setTimeout(() => {\n            this.genericError = false;\n            \n          },4000);\n          \n        }\n\n      }, () => {\n        this.router.navigate(['user/me']);\n      })\n\n\n  }\n\n}\n","<div class=\"form-bg\">\n    <div class=\"error-popup\" *ngIf=\"genericError\">An error occurred, please try again.</div>\n    \n    <span class=\"sign\">Sign in to your account</span>\n    <form (ngSubmit)=\"submit()\" [formGroup]=\"loginForm\" #formDir=\"ngForm\">\n        <div class=\"form-container\">\n            <label class=\"label\"for=\"username\">Username</label>\n            <div class=\"input-div\">\n                <input  class=\"field-input\" class=\"field-input\" type=\"text\"  formControlName=\"username\" required>\n            </div>\n            <div class=\"error\" *ngIf=\"username.invalid && formDir.submitted\">\n                <p class=\"danger\">Username is required!</p>\n              \n            </div>\n        </div>\n        <div class=\"form-container\" >\n            <label class=\"label\"for=\"password\">Password</label>\n            <div class=\"input-div\">\n                <input  class=\"field-input\" [type]=\"inputType ? 'text': 'password'\"formControlName=\"password\" required>\n                <span class=\"show\" (click)=\"showPassword()\">{{type}}</span>\n            </div>\n            <div class=\"error\" *ngIf=\"password.invalid && formDir.submitted\"> \n                <p class=\"danger\">Password is required!</p> \n            </div>\n        </div>\n        <div class=\"error\" *ngIf=\"badCredential\">\n            <p class=\"danger\">Incorrect username or password</p>\n        </div>\n       \n        <input class=\"submit-btn\" type=\"submit\" value=\"Continue\">\n        \n    \n    </form>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}