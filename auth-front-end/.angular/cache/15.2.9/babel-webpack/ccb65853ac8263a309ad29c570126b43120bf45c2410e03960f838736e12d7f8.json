{"ast":null,"code":"import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { PasswordValidators } from 'src/app/utils/password-validators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction ResetPasswordComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtext(1, \"Password successfully updated\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtext(1, \"Incorrect password!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtext(1, \"The new password cannot be the same as the old password.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_div_12_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 19);\n    i0.ɵɵtext(1, \" Old passsword is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵtemplate(1, ResetPasswordComponent_div_12_span_1_Template, 2, 0, \"span\", 12);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.f.oldPassword.errors[\"required\"]);\n  }\n}\nfunction ResetPasswordComponent_span_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 19);\n    i0.ɵɵtext(1, \"New password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_div_21_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 19);\n    i0.ɵɵtext(1, \" Must be at least 8 characters long\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_div_21_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 19);\n    i0.ɵɵtext(1, \"Must contain at least 1 digit\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_div_21_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 19);\n    i0.ɵɵtext(1, \"Must contain at least 1 uppercase character\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_div_21_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 19);\n    i0.ɵɵtext(1, \"Must contain at least 1 lowercase character\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_div_21_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 19);\n    i0.ɵɵtext(1, \" Must contain at least 1 special character\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_div_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵtemplate(1, ResetPasswordComponent_div_21_span_1_Template, 2, 0, \"span\", 12);\n    i0.ɵɵtemplate(2, ResetPasswordComponent_div_21_span_2_Template, 2, 0, \"span\", 12);\n    i0.ɵɵtemplate(3, ResetPasswordComponent_div_21_span_3_Template, 2, 0, \"span\", 12);\n    i0.ɵɵtemplate(4, ResetPasswordComponent_div_21_span_4_Template, 2, 0, \"span\", 12);\n    i0.ɵɵtemplate(5, ResetPasswordComponent_div_21_span_5_Template, 2, 0, \"span\", 12);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r5.minLengthValid);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r5.requiresDigitValid);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r5.requiresUppercaseValid);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r5.requiresLowercaseValid);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r5.requiresSpecialCharsValid);\n  }\n}\nfunction ResetPasswordComponent_div_29_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 19);\n    i0.ɵɵtext(1, \"Confirm password\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_div_29_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 19);\n    i0.ɵɵtext(1, \"Password must be at least 8 characters long\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_div_29_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 19);\n    i0.ɵɵtext(1, \"Passwords do not match\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ResetPasswordComponent_div_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵtemplate(1, ResetPasswordComponent_div_29_span_1_Template, 2, 0, \"span\", 12);\n    i0.ɵɵtemplate(2, ResetPasswordComponent_div_29_span_2_Template, 2, 0, \"span\", 12);\n    i0.ɵɵtemplate(3, ResetPasswordComponent_div_29_span_3_Template, 2, 0, \"span\", 12);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.f.confirmPassword.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.f.confirmPassword.errors[\"minLength\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.f.confirmPassword.errors[\"mismatch\"]);\n  }\n}\nexport class ResetPasswordComponent {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n    this.passtype = \"Show\";\n    this.newPasstype = \"Show\";\n    this.newPassConfirmtype = \"Show\";\n    this.submitted = false;\n    this.success = false;\n    this.samePassword = false;\n    this.incorrectPassword = false;\n    this.resetForm = new FormGroup({\n      oldPassword: new FormControl(null, [Validators.required, Validators.minLength(8)]),\n      password: new FormControl(null, Validators.compose([Validators.required, Validators.minLength(8), PasswordValidators.patternValidator(new RegExp('(?=.*[0-9])'), {\n        requiresDigit: true\n      }), PasswordValidators.patternValidator(new RegExp(\"(?=.*[A-Z])\"), {\n        requiresUppercase: true\n      }), PasswordValidators.patternValidator(new RegExp(\"(?=.*[a-z])\"), {\n        requiresLowercase: true\n      }), PasswordValidators.patternValidator(new RegExp(\"(?=.*[$@^!%*?&])\"), {\n        requiresSpecialChars: true\n      })])),\n      confirmPassword: new FormControl(null, [Validators.required, Validators.minLength(8)])\n    }, {\n      validators: PasswordValidators.MatchValidator\n    });\n  }\n  showPassword() {\n    this.inputTypePass = !this.inputTypePass;\n    if (this.inputTypePass) {\n      this.passtype = \"Hide\";\n    } else {\n      this.passtype = \"Show\";\n    }\n  }\n  showPasswordNewPass() {\n    this.inputTypeNewPass = !this.inputTypeNewPass;\n    if (this.inputTypeNewPass) {\n      this.newPasstype = \"Hide\";\n    } else {\n      this.passtype = \"Show\";\n    }\n  }\n  showPasswordNewPassConfirm() {\n    this.inputTypeNewPassConfirm = !this.inputTypeNewPassConfirm;\n    if (this.inputTypeNewPassConfirm) {\n      this.passtype = \"Hide\";\n    } else {\n      this.passtype = \"Show\";\n    }\n  }\n  get f() {\n    return this.resetForm.controls;\n  }\n  get requiredValid() {\n    return !this.resetForm.controls[\"password\"].hasError(\"required\");\n  }\n  get minLengthValid() {\n    return !this.resetForm.controls[\"password\"].hasError(\"minlength\");\n  }\n  get requiresDigitValid() {\n    return !this.resetForm.controls[\"password\"].hasError(\"requiresDigit\");\n  }\n  get requiresUppercaseValid() {\n    return !this.resetForm.controls[\"password\"].hasError(\"requiresUppercase\");\n  }\n  get requiresLowercaseValid() {\n    return !this.resetForm.controls[\"password\"].hasError(\"requiresLowercase\");\n  }\n  get requiresSpecialCharsValid() {\n    return !this.resetForm.controls[\"password\"].hasError(\"requiresSpecialChars\");\n  }\n  get passwordValid() {\n    return this.resetForm.controls[\"password\"].errors === null;\n  }\n  onSubmit() {\n    this.submitted = true;\n    if (this.resetForm.invalid) {\n      return;\n    }\n    this.user = {\n      password: this.resetForm.get('oldPassword').value,\n      newPassword: this.resetForm.get('password').value\n    };\n    this.authService.reset(this.user).subscribe(res => {\n      this.success = true;\n      this.resetForm.reset();\n    }, err => {\n      if (err.error.message === \"The new password cannot be the same as the old password.\") {\n        this.samePassword = true;\n        setTimeout(() => {\n          this.samePassword = false;\n        }, 2000);\n      }\n      if (err.error.message === \"Incorrect password!\") {\n        this.incorrectPassword = true;\n        setTimeout(() => {\n          this.incorrectPassword = false;\n        }, 2000);\n      }\n    }, () => {\n      setTimeout(() => {\n        this.success = false;\n      }, 2000);\n    });\n  }\n}\nResetPasswordComponent.ɵfac = function ResetPasswordComponent_Factory(t) {\n  return new (t || ResetPasswordComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.Router));\n};\nResetPasswordComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ResetPasswordComponent,\n  selectors: [[\"app-reset-password\"]],\n  inputs: {\n    passtype: \"passtype\",\n    newPasstype: \"newPasstype\",\n    newPassConfirmtype: \"newPassConfirmtype\"\n  },\n  decls: 31,\n  vars: 14,\n  consts: [[1, \"form-bg\"], [\"class\", \"success-popup\", 4, \"ngIf\"], [\"class\", \"error-popup\", 4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-container\"], [\"for\", \"oldPassword\", 1, \"label\"], [1, \"input-div\"], [\"formControlName\", \"oldPassword\", 1, \"field-input\", 3, \"type\"], [1, \"show\", 3, \"click\"], [\"class\", \"error\", 4, \"ngIf\"], [\"for\", \"password\", 1, \"label\"], [\"formControlName\", \"password\", 1, \"field-input\", 3, \"type\"], [\"class\", \"danger\", 4, \"ngIf\"], [\"for\", \"confirmPassword\", 1, \"label\"], [\"formControlName\", \"confirmPassword\", 1, \"field-input\", 3, \"type\"], [\"type\", \"submit\", \"value\", \"Reset\", 1, \"submit-btn\"], [1, \"success-popup\"], [1, \"error-popup\"], [1, \"error\"], [1, \"danger\"]],\n  template: function ResetPasswordComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, ResetPasswordComponent_div_1_Template, 2, 0, \"div\", 1);\n      i0.ɵɵtemplate(2, ResetPasswordComponent_div_2_Template, 2, 0, \"div\", 2);\n      i0.ɵɵtemplate(3, ResetPasswordComponent_div_3_Template, 2, 0, \"div\", 2);\n      i0.ɵɵelementStart(4, \"form\", 3);\n      i0.ɵɵlistener(\"ngSubmit\", function ResetPasswordComponent_Template_form_ngSubmit_4_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(5, \"div\", 4)(6, \"label\", 5);\n      i0.ɵɵtext(7, \"Old password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"div\", 6);\n      i0.ɵɵelement(9, \"input\", 7);\n      i0.ɵɵelementStart(10, \"span\", 8);\n      i0.ɵɵlistener(\"click\", function ResetPasswordComponent_Template_span_click_10_listener() {\n        return ctx.showPassword();\n      });\n      i0.ɵɵtext(11);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(12, ResetPasswordComponent_div_12_Template, 2, 1, \"div\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"div\", 4)(14, \"label\", 10);\n      i0.ɵɵtext(15, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"div\", 6);\n      i0.ɵɵelement(17, \"input\", 11);\n      i0.ɵɵelementStart(18, \"span\", 8);\n      i0.ɵɵlistener(\"click\", function ResetPasswordComponent_Template_span_click_18_listener() {\n        return ctx.showPasswordNewPass();\n      });\n      i0.ɵɵtext(19);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(20, ResetPasswordComponent_span_20_Template, 2, 0, \"span\", 12);\n      i0.ɵɵtemplate(21, ResetPasswordComponent_div_21_Template, 6, 5, \"div\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(22, \"div\", 4)(23, \"label\", 13);\n      i0.ɵɵtext(24, \"Confirm password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(25, \"div\", 6);\n      i0.ɵɵelement(26, \"input\", 14);\n      i0.ɵɵelementStart(27, \"span\", 8);\n      i0.ɵɵlistener(\"click\", function ResetPasswordComponent_Template_span_click_27_listener() {\n        return ctx.showPasswordNewPassConfirm();\n      });\n      i0.ɵɵtext(28);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(29, ResetPasswordComponent_div_29_Template, 4, 3, \"div\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(30, \"input\", 15);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.success);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.incorrectPassword);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.samePassword);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.resetForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"type\", ctx.inputTypePass ? \"text\" : \"password\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.passtype);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.submitted || ctx.f.oldPassword.dirty) && ctx.f.oldPassword.errors);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"type\", ctx.inputTypeNewPass ? \"text\" : \"password\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.newPasstype);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.f.password.dirty || ctx.submitted) && !ctx.requiredValid);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.requiredValid);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"type\", ctx.inputTypeNewPassConfirm ? \"text\" : \"password\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.newPassConfirmtype);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.submitted || ctx.f.confirmPassword.dirty) && ctx.f.confirmPassword.errors);\n    }\n  },\n  dependencies: [i3.NgIf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FormGroup","FormControl","Validators","PasswordValidators","i0","ResetPasswordComponent","constructor","authService","router","oldPassword","required","minLength","password","compose","patternValidator","RegExp","requiresDigit","requiresUppercase","requiresLowercase","requiresSpecialChars","confirmPassword","validators","MatchValidator","showPassword","inputTypePass","passtype","showPasswordNewPass","inputTypeNewPass","newPasstype","showPasswordNewPassConfirm","inputTypeNewPassConfirm","f","resetForm","controls","requiredValid","hasError","minLengthValid","requiresDigitValid","requiresUppercaseValid","requiresLowercaseValid","requiresSpecialCharsValid","passwordValid","errors","onSubmit","submitted","invalid","user","get","value","newPassword","reset","subscribe","res","success","err","error","message","samePassword","setTimeout","incorrectPassword","selectors","inputs","newPassConfirmtype","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/home/sam/Desktop/auth-front-end/src/app/components/reset-password/reset-password.component.ts","/home/sam/Desktop/auth-front-end/src/app/components/reset-password/reset-password.component.html"],"sourcesContent":["import { Component, Input } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { PasswordValidators } from 'src/app/utils/password-validators';\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.css']\n})\nexport class ResetPasswordComponent {\n  @Input() passtype = \"Show\";\n  @Input() newPasstype = \"Show\";\n  @Input() newPassConfirmtype = \"Show\";\n  submitted = false;\n  success = false;\n  samePassword =  false;\n  incorrectPassword = false;\n \n  inputTypePass: boolean;\n  inputTypeNewPass: boolean;\n  inputTypeNewPassConfirm: boolean;\n  \n \n  user: {password: string, newPassword:string};\n\n  constructor(private authService: AuthService, private router: Router){}\n\n  showPassword(){\n    this.inputTypePass = !this.inputTypePass\n    if(this.inputTypePass){\n        this.passtype = \"Hide\"\n    }else{\n      this.passtype = \"Show\"\n    }\n  }\n  showPasswordNewPass(){\n    this.inputTypeNewPass = !this.inputTypeNewPass\n    if(this.inputTypeNewPass){\n        this.newPasstype = \"Hide\"\n    }else{\n      this.passtype = \"Show\"\n    }\n  }\n  showPasswordNewPassConfirm(){\n    this.inputTypeNewPassConfirm = !this.inputTypeNewPassConfirm\n    if(this.inputTypeNewPassConfirm){\n        this.passtype = \"Hide\"\n    }else{\n      this.passtype = \"Show\"\n    }\n  }\n\n  resetForm = new FormGroup({\n    oldPassword: new FormControl(\n      null,\n      [\n        Validators.required,\n        Validators.minLength(8)\n\n      ]\n    ),\n  \n    password: new FormControl(\n      null,\n      Validators.compose([\n        Validators.required,\n        Validators.minLength(8),\n        PasswordValidators.patternValidator(new RegExp('(?=.*[0-9])'), {\n          requiresDigit: true\n        }),\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[A-Z])\"), {\n          requiresUppercase: true\n        }),\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[a-z])\"), {\n          requiresLowercase: true\n        }),\n        PasswordValidators.patternValidator(new RegExp(\"(?=.*[$@^!%*?&])\"), {\n          requiresSpecialChars: true\n        })\n      ])\n    ),\n    confirmPassword: new FormControl(\n      null,\n      [\n        Validators.required,\n        Validators.minLength(8)\n\n      ])\n  },\n    {\n      validators: PasswordValidators.MatchValidator\n    }\n  );\n\n  get f() {\n    return this.resetForm.controls;\n  }\n  get requiredValid() {\n    return !this.resetForm.controls[\"password\"].hasError(\"required\");\n  }\n  get minLengthValid() {\n    return !this.resetForm.controls[\"password\"].hasError(\"minlength\");\n  }\n  get requiresDigitValid() {\n    return !this.resetForm.controls[\"password\"].hasError(\"requiresDigit\");\n  }\n  get requiresUppercaseValid() {\n    return !this.resetForm.controls[\"password\"].hasError(\"requiresUppercase\");\n  }\n  get requiresLowercaseValid() {\n    return !this.resetForm.controls[\"password\"].hasError(\"requiresLowercase\");\n  }\n  get requiresSpecialCharsValid() {\n    return !this.resetForm.controls[\"password\"].hasError(\"requiresSpecialChars\");\n  }\n  get passwordValid() {\n    return this.resetForm.controls[\"password\"].errors === null;\n  }\n \n  onSubmit() {\n    this.submitted = true;\n\n    if(this.resetForm.invalid){\n      return;\n    }\n    this.user = {\n      password: this.resetForm.get('oldPassword').value,\n      newPassword: this.resetForm.get('password').value\n    }\n    this.authService.reset(this.user)\n      .subscribe((res)=> {\n          this.success = true;\n          this.resetForm.reset()\n          \n      }, (err) => {\n          if(err.error.message === \"The new password cannot be the same as the old password.\"){\n              this.samePassword = true;\n              setTimeout(() => {\n                this.samePassword = false;\n              },2000);\n          }\n          if(err.error.message === \"Incorrect password!\"){\n            this.incorrectPassword = true;\n            setTimeout(() => {\n              this.incorrectPassword = false;\n            },2000);\n          }\n      },() => {\n        setTimeout(() => {\n          this.success = false;\n        },2000);\n      })\n    \n  }\n\n}\n","<div class=\"form-bg\">\n    <div class=\"success-popup\" *ngIf=\"success\">Password successfully updated</div>\n    <div class=\"error-popup\" *ngIf=\"incorrectPassword\">Incorrect password!</div>\n    <div class=\"error-popup\" *ngIf=\"samePassword\">The new password cannot be the same as the old password.</div>\n    <form (ngSubmit)=\"onSubmit()\" [formGroup]=\"resetForm\">\n        <div class=\"form-container\">\n            <label class=\"label\" for=\"oldPassword\">Old password</label>\n            <div class=\"input-div\">\n                <input  class=\"field-input\"[type]=\"inputTypePass ? 'text': 'password'\" formControlName=\"oldPassword\">\n                <span class=\"show\" (click)=\"showPassword()\">{{passtype}}</span>\n            </div>\n            <div class=\"error\" *ngIf=\"(submitted || f.oldPassword.dirty) && f.oldPassword.errors\">\n                <span class=\"danger\" *ngIf=\"f.oldPassword.errors['required']\"> Old passsword is required</span>\n                \n            </div>\n            \n        </div>\n        \n        <div  class=\"form-container\">\n            <label class=\"label\" for=\"password\">Password</label>\n            <div class=\"input-div\">\n                <input class=\"field-input\" [type]=\"inputTypeNewPass ? 'text': 'password'\" formControlName=\"password\">\n                <span class=\"show\" (click)=\"showPasswordNewPass()\">{{newPasstype}}</span>\n            </div>\n            <span class=\"danger\" *ngIf=\"(f.password.dirty || submitted) && !requiredValid\">New password is required</span>\n            <div class=\"error\" *ngIf=\"requiredValid\">\n                <span class=\"danger\" *ngIf=\"!minLengthValid\"> Must be at least 8 characters long</span>\n                <span class=\"danger\" *ngIf=\"!requiresDigitValid\">Must contain at least 1 digit</span>\n                <span class=\"danger\" *ngIf=\"!requiresUppercaseValid\">Must contain at least 1 uppercase character</span>\n                <span class=\"danger\" *ngIf=\"!requiresLowercaseValid\">Must contain at least 1 lowercase character</span>\n                <span class=\"danger\" *ngIf=\"!requiresSpecialCharsValid\"> Must contain at least 1 special character</span>\n                \n            </div>\n            \n        </div>\n        <div  class=\"form-container\">\n            <label class=\"label\" for=\"confirmPassword\">Confirm password</label>\n           <div class=\"input-div\">\n            <input class=\"field-input\" [type]=\"inputTypeNewPassConfirm ? 'text': 'password'\" formControlName=\"confirmPassword\">\n            <span class=\"show\" (click)=\"showPasswordNewPassConfirm()\">{{newPassConfirmtype}}</span>\n        </div>\n            <div class=\"error\" *ngIf=\"(submitted || f.confirmPassword.dirty) && f.confirmPassword.errors\">\n                <span class=\"danger\" *ngIf=\"f.confirmPassword.errors['required']\">Confirm password</span>\n                <span class=\"danger\" *ngIf=\"f.confirmPassword.errors['minLength']\">Password must be at least 8 characters long</span>\n                <span class=\"danger\" *ngIf=\"f.confirmPassword.errors['mismatch']\">Passwords do not match</span>\n            </div>\n        </div>\n       \n        <input class=\"submit-btn\"  type=\"submit\" value=\"Reset\">\n    </form>\n   \n</div>\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}